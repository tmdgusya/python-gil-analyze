{"traceEvents": [{"ph": "M", "pid": 346074, "tid": 346074, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 346074, "tid": 346092, "name": "thread_name", "args": {"name": "Dummy-12"}}, {"ph": "M", "pid": 346074, "tid": 346091, "name": "thread_name", "args": {"name": "Dummy-10"}}, {"ph": "M", "pid": 346074, "tid": 346090, "name": "thread_name", "args": {"name": "Dummy-8"}}, {"ph": "M", "pid": 346074, "tid": 346089, "name": "thread_name", "args": {"name": "Dummy-6"}}, {"ph": "M", "pid": 346074, "tid": 346074, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 346074, "tid": 346074, "ts": 46101477617.734, "ph": "X", "dur": 3.15174316115894, "name": "_newname (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:843)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477622.952, "ph": "X", "dur": 0.15068532998735815, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477622.826, "ph": "X", "dur": 0.4768035806534289, "name": "current_thread (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1427)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477623.69, "ph": "X", "dur": 0.5642450677628813, "name": "Thread.daemon (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1145)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477639.114, "ph": "X", "dur": 0.42510861343148854, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477640.175, "ph": "X", "dur": 0.09734052338599414, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477640.373, "ph": "X", "dur": 0.13143720389408248, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477638.126, "ph": "X", "dur": 3.3497238866897754, "name": "Condition.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:281)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477636.892, "ph": "X", "dur": 4.863726490540859, "name": "Event.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:592)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477642.828, "ph": "X", "dur": 0.5818433544767333, "name": "_make_invoke_excepthook (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1265)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477646.266, "ph": "X", "dur": 0.721529755267934, "name": "set.add", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477644.85, "ph": "X", "dur": 2.396116725382918, "name": "WeakSet.add (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:85)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477617.133, "ph": "X", "dur": 30.182161607175875, "name": "Thread.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:869)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477647.968, "ph": "X", "dur": 0.22547804852122938, "name": "list.append", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477649.009, "ph": "X", "dur": 0.06654352163675306, "name": "Event.is_set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:605)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477650.634, "ph": "X", "dur": 0.19028147509352528, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477651.302, "ph": "X", "dur": 0.10174009506445715, "name": "Thread.daemon (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1145)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477651.888, "ph": "X", "dur": 72.2233686736488, "name": "_thread.start_joinable_thread", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477726.905, "ph": "X", "dur": 0.7385780955219781, "name": "_thread.lock.__enter__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477726.62, "ph": "X", "dur": 1.295673859307357, "name": "Condition.__enter__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:303)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477729.885, "ph": "X", "dur": 0.28982178431875094, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477729.581, "ph": "X", "dur": 0.7204298623483182, "name": "Condition._is_owned (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:318)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477730.498, "ph": "X", "dur": 0.21612895870449547, "name": "_thread.allocate_lock", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477730.832, "ph": "X", "dur": 0.12208811407734858, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477731.205, "ph": "X", "dur": 0.11988832823811707, "name": "collections.deque.append", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477731.638, "ph": "X", "dur": 0.26342435424797284, "name": "_thread.lock.release", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477731.544, "ph": "X", "dur": 0.4421569536855327, "name": "Condition._release_save (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:312)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477846.767, "ph": "X", "dur": 0.16773367024140234, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477846.627, "ph": "X", "dur": 0.48945234922901004, "name": "Thread._set_ident (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1018)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477847.37, "ph": "X", "dur": 0.18093238527679137, "name": "_thread.get_native_id", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477847.311, "ph": "X", "dur": 0.38001300372724267, "name": "Thread._set_native_id (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1022)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477848.279, "ph": "X", "dur": 0.19578093969160404, "name": "_thread.lock.__enter__", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477848.131, "ph": "X", "dur": 0.5054007965634385, "name": "Condition.__enter__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:303)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477848.934, "ph": "X", "dur": 0.08744148710945236, "name": "builtins.len", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477849.417, "ph": "X", "dur": 0.1545349552060133, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477849.313, "ph": "X", "dur": 0.35361557365646457, "name": "Condition._is_owned (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:318)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477850.142, "ph": "X", "dur": 18.280220324013815, "name": "_thread.lock.release", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477869.053, "ph": "X", "dur": 0.2755231763637461, "name": "collections.deque.remove", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477849.185, "ph": "X", "dur": 20.3667171925249, "name": "Condition.notify (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:398)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477848.832, "ph": "X", "dur": 20.856169541753907, "name": "Condition.notify_all (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:428)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477870.676, "ph": "X", "dur": 0.13143720389408248, "name": "_thread.lock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477870.414, "ph": "X", "dur": 0.4982514925859361, "name": "Condition.__exit__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:306)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477847.9, "ph": "X", "dur": 23.28198337596645, "name": "Event.set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:620)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477872.882, "ph": "X", "dur": 0.2293276737398845, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477732.135, "ph": "X", "dur": 178.04076679112154, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477912.724, "ph": "X", "dur": 0.5466467810490292, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477912.523, "ph": "X", "dur": 0.9222602130978089, "name": "Condition._acquire_restore (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:315)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477729.214, "ph": "X", "dur": 187.17317770269113, "name": "Condition.wait (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:327)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477917.923, "ph": "X", "dur": 0.22272831622219, "name": "_thread.lock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477917.436, "ph": "X", "dur": 0.8381184047472037, "name": "Condition.__exit__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:306)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477725.352, "ph": "X", "dur": 193.4117703427517, "name": "Event.wait (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:641)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477648.533, "ph": "X", "dur": 270.4955658281825, "name": "Thread.start (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:953)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477923.441, "ph": "X", "dur": 1.655338844021708, "name": "_newname (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:843)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477926.651, "ph": "X", "dur": 0.23592703125757902, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477926.55, "ph": "X", "dur": 0.7803740264673767, "name": "current_thread (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1427)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477927.525, "ph": "X", "dur": 0.34206669800049916, "name": "Thread.daemon (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1145)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477930.949, "ph": "X", "dur": 0.3019206064345242, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477931.342, "ph": "X", "dur": 0.05829432473963491, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477931.473, "ph": "X", "dur": 0.13143720389408248, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477930.346, "ph": "X", "dur": 1.923712716407952, "name": "Condition.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:281)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477929.3, "ph": "X", "dur": 3.2369848624291606, "name": "Event.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:592)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477933.358, "ph": "X", "dur": 0.6082407845475113, "name": "_make_invoke_excepthook (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1265)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477935.197, "ph": "X", "dur": 0.40091096919994196, "name": "set.add", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477934.384, "ph": "X", "dur": 1.3655170597029573, "name": "WeakSet.add (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:85)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477922.966, "ph": "X", "dur": 12.877546302861235, "name": "Thread.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:869)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477936.64, "ph": "X", "dur": 0.13033731097446674, "name": "list.append", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477937.199, "ph": "X", "dur": 0.06984320039560032, "name": "Event.is_set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:605)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477938.294, "ph": "X", "dur": 0.19908061845045127, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477939.853, "ph": "X", "dur": 0.08799143356926024, "name": "Thread.daemon (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1145)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477940.05, "ph": "X", "dur": 43.03990983748403, "name": "_thread.start_joinable_thread", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477984.68, "ph": "X", "dur": 0.4707541695955423, "name": "_thread.lock.__enter__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477984.434, "ph": "X", "dur": 0.97120544802071, "name": "Condition.__enter__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:303)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477986.254, "ph": "X", "dur": 0.33766712632203616, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477986.114, "ph": "X", "dur": 0.6280388571005949, "name": "Condition._is_owned (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:318)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477986.91, "ph": "X", "dur": 0.2150290657848797, "name": "_thread.allocate_lock", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477987.226, "ph": "X", "dur": 0.10174009506445715, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477987.551, "ph": "X", "dur": 0.13528682911273762, "name": "collections.deque.append", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477987.931, "ph": "X", "dur": 0.17708276005813622, "name": "_thread.lock.release", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477987.838, "ph": "X", "dur": 0.3525156807368488, "name": "Condition._release_save (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:312)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478096.881, "ph": "X", "dur": 0.14848554414812665, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478096.754, "ph": "X", "dur": 0.44490668598457206, "name": "Thread._set_ident (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1018)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478097.465, "ph": "X", "dur": 0.22272831622219, "name": "_thread.get_native_id", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478097.403, "ph": "X", "dur": 0.4179593094539861, "name": "Thread._set_native_id (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1022)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478098.375, "ph": "X", "dur": 0.1286874715950431, "name": "_thread.lock.__enter__", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478098.235, "ph": "X", "dur": 0.4179593094539861, "name": "Condition.__enter__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:303)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478098.904, "ph": "X", "dur": 0.08249196897118148, "name": "builtins.len", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478099.373, "ph": "X", "dur": 0.1523351693667818, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478099.256, "ph": "X", "dur": 0.38221278956647414, "name": "Condition._is_owned (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:318)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478100.084, "ph": "X", "dur": 18.187279372306282, "name": "_thread.lock.release", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478118.839, "ph": "X", "dur": 0.25077558567239167, "name": "collections.deque.remove", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478099.143, "ph": "X", "dur": 20.164886841775406, "name": "Condition.notify (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:398)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478098.812, "ph": "X", "dur": 20.629041653853257, "name": "Condition.notify_all (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:428)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478120.592, "ph": "X", "dur": 0.15123527644716603, "name": "_thread.lock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478120.086, "ph": "X", "dur": 2.86687089497846, "name": "Condition.__exit__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:306)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478097.992, "ph": "X", "dur": 25.277739078609237, "name": "Event.set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:620)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478124.809, "ph": "X", "dur": 0.22822778082026876, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477988.339, "ph": "X", "dur": 168.20332451807826, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478158.705, "ph": "X", "dur": 0.547746673968645, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478158.513, "ph": "X", "dur": 0.9074116586829962, "name": "Condition._acquire_restore (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:315)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477985.865, "ph": "X", "dur": 173.81552814041763, "name": "Condition.wait (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:327)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478161.051, "ph": "X", "dur": 0.19523099323179616, "name": "_thread.lock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478160.602, "ph": "X", "dur": 0.7578262216152537, "name": "Condition.__exit__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:306)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477983.941, "ph": "X", "dur": 177.89613087219206, "name": "Event.wait (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:641)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477937.035, "ph": "X", "dur": 225.0193931737496, "name": "Thread.start (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:953)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478165.359, "ph": "X", "dur": 1.5678973569122558, "name": "_newname (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:843)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478168.683, "ph": "X", "dur": 0.24692596045373655, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478168.582, "ph": "X", "dur": 0.7638756326731404, "name": "current_thread (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1427)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478169.515, "ph": "X", "dur": 0.36516444931243003, "name": "Thread.daemon (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1145)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478172.302, "ph": "X", "dur": 0.271673551145091, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478172.661, "ph": "X", "dur": 0.05169496722194039, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478172.811, "ph": "X", "dur": 0.11658864947926982, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478171.745, "ph": "X", "dur": 1.8439704797358099, "name": "Condition.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:281)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478171.123, "ph": "X", "dur": 2.729934226486299, "name": "Event.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:592)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478174.66, "ph": "X", "dur": 0.7006317897952347, "name": "_make_invoke_excepthook (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1265)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478176.51, "ph": "X", "dur": 0.3844125754057056, "name": "set.add", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478175.697, "ph": "X", "dur": 1.3253709681369823, "name": "WeakSet.add (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:85)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478164.863, "ph": "X", "dur": 12.24235814178314, "name": "Thread.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:869)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478177.605, "ph": "X", "dur": 0.13198715035389033, "name": "list.append", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478178.252, "ph": "X", "dur": 0.06654352163675306, "name": "Event.is_set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:605)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478179.308, "ph": "X", "dur": 0.20018051137006704, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478179.947, "ph": "X", "dur": 0.10558972028311228, "name": "Thread.daemon (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1145)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478180.166, "ph": "X", "dur": 62.44312083242553, "name": "_thread.start_joinable_thread", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478244.348, "ph": "X", "dur": 0.5603954425442261, "name": "_thread.lock.__enter__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478244.107, "ph": "X", "dur": 1.064146399728241, "name": "Condition.__enter__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:303)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478245.999, "ph": "X", "dur": 0.3178690537689526, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478245.857, "ph": "X", "dur": 0.6082407845475113, "name": "Condition._is_owned (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:318)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478246.601, "ph": "X", "dur": 0.2683738723862437, "name": "_thread.allocate_lock", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478246.974, "ph": "X", "dur": 0.10393988090368866, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478247.333, "ph": "X", "dur": 0.14298607955004788, "name": "collections.deque.append", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478247.725, "ph": "X", "dur": 0.19083142155333313, "name": "_thread.lock.release", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478247.614, "ph": "X", "dur": 0.3926617723028238, "name": "Condition._release_save (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:312)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478299.588, "ph": "X", "dur": 0.1776327065179441, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478299.454, "ph": "X", "dur": 0.49165213506824157, "name": "Thread._set_ident (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1018)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478300.227, "ph": "X", "dur": 0.2177787980839191, "name": "_thread.get_native_id", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478300.16, "ph": "X", "dur": 0.38991204000378443, "name": "Thread._set_native_id (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1022)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478301.071, "ph": "X", "dur": 0.16663377732178658, "name": "_thread.lock.__enter__", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478300.918, "ph": "X", "dur": 0.498801439045744, "name": "Condition.__enter__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:303)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478301.673, "ph": "X", "dur": 0.09844041630560989, "name": "builtins.len", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478302.154, "ph": "X", "dur": 0.13968640079120065, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478302.022, "ph": "X", "dur": 0.3844125754057056, "name": "Condition._is_owned (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:318)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478303.939, "ph": "X", "dur": 17.089586238529762, "name": "_thread.lock.release", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478321.549, "ph": "X", "dur": 0.24197644231546564, "name": "collections.deque.remove", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478301.919, "ph": "X", "dur": 20.22098138067581, "name": "Condition.notify (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:398)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478301.583, "ph": "X", "dur": 20.720332766181365, "name": "Condition.notify_all (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:428)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478323.278, "ph": "X", "dur": 0.16883356316101808, "name": "_thread.lock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478322.936, "ph": "X", "dur": 0.6384878398369446, "name": "Condition.__exit__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:306)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478300.702, "ph": "X", "dur": 23.175843709223532, "name": "Event.set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:620)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478325.424, "ph": "X", "dur": 0.2128292799456482, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478248.16, "ph": "X", "dur": 108.5935278465829, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478358.959, "ph": "X", "dur": 0.5928422836728908, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478358.783, "ph": "X", "dur": 0.9536071613068579, "name": "Condition._acquire_restore (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:315)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478245.649, "ph": "X", "dur": 114.34541786971349, "name": "Condition.wait (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:327)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478361.463, "ph": "X", "dur": 0.21172938702603245, "name": "_thread.lock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478360.97, "ph": "X", "dur": 0.8342687795285486, "name": "Condition.__exit__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:306)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478243.6, "ph": "X", "dur": 118.71199276058802, "name": "Event.wait (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:641)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478177.908, "ph": "X", "dur": 184.63077521899933, "name": "Thread.start (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:953)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478366.218, "ph": "X", "dur": 1.6360907179284325, "name": "_newname (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:843)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478369.465, "ph": "X", "dur": 0.24197644231546564, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478369.337, "ph": "X", "dur": 0.8078713494577705, "name": "current_thread (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1427)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478370.331, "ph": "X", "dur": 0.38221278956647414, "name": "Thread.daemon (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1145)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478373.552, "ph": "X", "dur": 0.28322242680105636, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478373.944, "ph": "X", "dur": 0.05334480660136402, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478374.083, "ph": "X", "dur": 0.11493881009984618, "name": "builtins.hasattr", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478372.765, "ph": "X", "dur": 2.2982262555371156, "name": "Condition.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:281)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478372.139, "ph": "X", "dur": 3.2166368434162695, "name": "Event.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:592)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478380.096, "ph": "X", "dur": 0.8018219383998839, "name": "_make_invoke_excepthook (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1265)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478382.18, "ph": "X", "dur": 0.3904619864635923, "name": "set.add", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478381.296, "ph": "X", "dur": 1.4353602600985575, "name": "WeakSet.add (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:85)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478365.688, "ph": "X", "dur": 17.140181312832087, "name": "Thread.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:869)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478383.374, "ph": "X", "dur": 0.1193383817783092, "name": "list.append", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478383.849, "ph": "X", "dur": 0.07644255791329484, "name": "Event.is_set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:605)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478385.278, "ph": "X", "dur": 0.20458008304853004, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478385.854, "ph": "X", "dur": 0.2606746219489335, "name": "Thread.daemon (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1145)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478386.258, "ph": "X", "dur": 59.3133755296589, "name": "_thread.start_joinable_thread", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478447.327, "ph": "X", "dur": 0.5037509571840149, "name": "_thread.lock.__enter__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478447.076, "ph": "X", "dur": 1.0256501475416897, "name": "Condition.__enter__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:303)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478448.962, "ph": "X", "dur": 0.3398669121612677, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478448.81, "ph": "X", "dur": 0.6923825928981165, "name": "Condition._is_owned (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:318)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478449.658, "ph": "X", "dur": 0.2430763352350814, "name": "_thread.allocate_lock", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478450.025, "ph": "X", "dur": 0.10174009506445715, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478450.373, "ph": "X", "dur": 0.16443399148255505, "name": "collections.deque.append", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478450.817, "ph": "X", "dur": 0.17653281359832834, "name": "_thread.lock.release", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478450.716, "ph": "X", "dur": 0.37561343204877967, "name": "Condition._release_save (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:312)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478542.0, "ph": "X", "dur": 0.14243613309024003, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478541.876, "ph": "X", "dur": 0.43225791740899094, "name": "Thread._set_ident (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1018)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478542.54, "ph": "X", "dur": 0.16278415210313144, "name": "_thread.get_native_id", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478542.476, "ph": "X", "dur": 0.34261664446030704, "name": "Thread._set_native_id (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1022)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478544.28, "ph": "X", "dur": 0.15783463396486055, "name": "_thread.lock.__enter__", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478544.148, "ph": "X", "dur": 0.4548057222611138, "name": "Condition.__enter__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:303)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478544.907, "ph": "X", "dur": 0.08579164773002873, "name": "builtins.len", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478545.382, "ph": "X", "dur": 0.15123527644716603, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478545.252, "ph": "X", "dur": 0.3910119329234002, "name": "Condition._is_owned (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:318)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478546.093, "ph": "X", "dur": 18.26042225146073, "name": "_thread.lock.release", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478564.92, "ph": "X", "dur": 0.2579248896498941, "name": "collections.deque.remove", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478545.141, "ph": "X", "dur": 20.235829935090624, "name": "Condition.notify (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:398)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478544.785, "ph": "X", "dur": 20.707134051145974, "name": "Condition.notify_all (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:428)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478566.421, "ph": "X", "dur": 0.14463591892947153, "name": "_thread.lock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478566.099, "ph": "X", "dur": 0.5856929796953885, "name": "Condition.__exit__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:306)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478543.891, "ph": "X", "dur": 23.068054203101187, "name": "Event.set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:620)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478568.437, "ph": "X", "dur": 0.21832874454372697, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478451.266, "ph": "X", "dur": 150.54289385426793, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478604.073, "ph": "X", "dur": 0.6230893389623241, "name": "_thread.lock.acquire", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478603.874, "ph": "X", "dur": 1.0130013789661085, "name": "Condition._acquire_restore (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:315)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478448.584, "ph": "X", "dur": 156.5472093024503, "name": "Condition.wait (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:327)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478606.561, "ph": "X", "dur": 5.463718078191253, "name": "_thread.lock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478606.094, "ph": "X", "dur": 6.0560104154043355, "name": "Condition.__exit__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:306)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478446.604, "ph": "X", "dur": 166.05413375314907, "name": "Event.wait (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:641)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478383.674, "ph": "X", "dur": 229.21438476916407, "name": "Thread.start (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:953)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478614.707, "ph": "X", "dur": 0.07094309331521606, "name": "Event.is_set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:605)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478615.259, "ph": "X", "dur": 0.25407526443123896, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478615.116, "ph": "X", "dur": 0.9552570006862815, "name": "current_thread (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1427)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477874.986, "ph": "X", "dur": 244654.83281000648, "name": "time.sleep", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477874.236, "ph": "X", "dur": 244659.8510714522, "name": "work_io (/home/roach/gil-analyze/main.py:27)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477873.666, "ph": "X", "dur": 244673.57828503547, "name": "Thread.run (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:981)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101722567.912, "ph": "X", "dur": 1.8637685522888936, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101722574.179, "ph": "X", "dur": 1.2720261615356183, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101722557.46, "ph": "X", "dur": 18.567292376033524, "name": "Thread._delete (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1047)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477846.487, "ph": "X", "dur": 244729.82350926587, "name": "Thread._bootstrap_inner (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1025)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101477845.644, "ph": "X", "dur": 244731.3941563551, "name": "Thread._bootstrap (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:998)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101722591.996, "ph": "X", "dur": 1.60309393033996, "name": "dict.get", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101722595.056, "ph": "X", "dur": 0.4592052939395769, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101722590.264, "ph": "X", "dur": 5.5049640626768435, "name": "_DeleteDummyThreadOnDel.__del__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1382)", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101722602.934, "ph": "X", "dur": 2.351021115678672, "name": "set.discard", "cat": "FEE"}, {"pid": 346074, "tid": 346089, "ts": 46101722598.788, "ph": "X", "dur": 7.057462918714479, "name": "WeakSet.__init__.<locals>._remove (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:39)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478616.307, "ph": "X", "dur": 244213.87803928205, "name": "_thread._ThreadHandle.join", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101478614.26, "ph": "X", "dur": 244220.0214911846, "name": "Thread.join (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1056)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101722848.686, "ph": "X", "dur": 0.25407526443123896, "name": "Event.is_set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:605)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101722851.53, "ph": "X", "dur": 1.2263806053715647, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101722851.094, "ph": "X", "dur": 4.689393462781762, "name": "current_thread (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1427)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478327.099, "ph": "X", "dur": 244568.7353920448, "name": "time.sleep", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478326.67, "ph": "X", "dur": 244571.23489870463, "name": "work_io (/home/roach/gil-analyze/main.py:27)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478326.139, "ph": "X", "dur": 244579.91470367974, "name": "Thread.run (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:981)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101722917.53, "ph": "X", "dur": 0.9943031993326407, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101722933.973, "ph": "X", "dur": 1.118041152789413, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101722911.062, "ph": "X", "dur": 24.660699150704797, "name": "Thread._delete (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1047)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478299.363, "ph": "X", "dur": 244636.6697282784, "name": "Thread._bootstrap_inner (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1025)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101478298.672, "ph": "X", "dur": 244637.90050845544, "name": "Thread._bootstrap (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:998)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101722946.816, "ph": "X", "dur": 1.140039011181728, "name": "dict.get", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101722949.094, "ph": "X", "dur": 0.40146091565974984, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101722945.168, "ph": "X", "dur": 4.579404170820188, "name": "_DeleteDummyThreadOnDel.__del__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1382)", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101722954.146, "ph": "X", "dur": 1.455158332651641, "name": "set.discard", "cat": "FEE"}, {"pid": 346074, "tid": 346091, "ts": 46101722951.558, "ph": "X", "dur": 4.526609310678631, "name": "WeakSet.__init__.<locals>._remove (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:39)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478126.559, "ph": "X", "dur": 245024.9610760651, "name": "time.sleep", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478126.041, "ph": "X", "dur": 245027.227405426, "name": "work_io (/home/roach/gil-analyze/main.py:27)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478125.555, "ph": "X", "dur": 245035.26102331086, "name": "Thread.run (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:981)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101723171.381, "ph": "X", "dur": 0.9734052338599414, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101723175.448, "ph": "X", "dur": 1.0690959178665118, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101723165.49, "ph": "X", "dur": 11.545575977206559, "name": "Thread._delete (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1047)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478096.66, "ph": "X", "dur": 245080.6607534074, "name": "Thread._bootstrap_inner (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1025)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101478096.042, "ph": "X", "dur": 245081.88438428045, "name": "Thread._bootstrap (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:998)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101723187.81, "ph": "X", "dur": 1.1515878868376932, "name": "dict.get", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101723190.042, "ph": "X", "dur": 0.3552654130358882, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101723186.389, "ph": "X", "dur": 4.264834795810082, "name": "_DeleteDummyThreadOnDel.__del__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1382)", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101723194.666, "ph": "X", "dur": 1.1482882080788461, "name": "set.discard", "cat": "FEE"}, {"pid": 346074, "tid": 346090, "ts": 46101723192.221, "ph": "X", "dur": 4.034407229150582, "name": "WeakSet.__init__.<locals>._remove (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:39)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478570.156, "ph": "X", "dur": 244941.19763087886, "name": "time.sleep", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478569.657, "ph": "X", "dur": 244946.55850896906, "name": "work_io (/home/roach/gil-analyze/main.py:27)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478569.168, "ph": "X", "dur": 244955.81685761994, "name": "Thread.run (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:981)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101723537.893, "ph": "X", "dur": 1.3099724672623618, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101723543.059, "ph": "X", "dur": 1.126290349686531, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101723530.721, "ph": "X", "dur": 14.208966682056104, "name": "Thread._delete (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1047)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478541.776, "ph": "X", "dur": 245003.83708259743, "name": "Thread._bootstrap_inner (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1025)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101478541.171, "ph": "X", "dur": 245005.0128681285, "name": "Thread._bootstrap (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:998)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101723558.104, "ph": "X", "dur": 1.469456940606646, "name": "dict.get", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101723560.769, "ph": "X", "dur": 0.46690454437688717, "name": "_thread.RLock.__exit__", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101723556.214, "ph": "X", "dur": 5.358678304367949, "name": "_DeleteDummyThreadOnDel.__del__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1382)", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101723566.446, "ph": "X", "dur": 1.4848554414812665, "name": "set.discard", "cat": "FEE"}, {"pid": 346074, "tid": 346092, "ts": 46101723563.53, "ph": "X", "dur": 4.918171190061839, "name": "WeakSet.__init__.<locals>._remove (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:39)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101722856.733, "ph": "X", "dur": 1230.8150986502255, "name": "_thread._ThreadHandle.join", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101722845.614, "ph": "X", "dur": 1246.3268884955664, "name": "Thread.join (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1056)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724106.085, "ph": "X", "dur": 0.41245984485590736, "name": "Event.is_set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:605)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724109.712, "ph": "X", "dur": 1.3253709681369823, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724109.038, "ph": "X", "dur": 4.773535271132368, "name": "current_thread (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1427)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724115.119, "ph": "X", "dur": 5.190394687666739, "name": "_thread._ThreadHandle.join", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724100.239, "ph": "X", "dur": 20.6251920286346, "name": "Thread.join (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1056)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724123.154, "ph": "X", "dur": 0.28322242680105636, "name": "Event.is_set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:605)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724124.494, "ph": "X", "dur": 0.4696542766759265, "name": "_thread.get_ident", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724124.164, "ph": "X", "dur": 1.2417791062461851, "name": "current_thread (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1427)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724126.077, "ph": "X", "dur": 1.6586385227805553, "name": "_thread._ThreadHandle.join", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724122.032, "ph": "X", "dur": 6.21274515644958, "name": "Thread.join (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1056)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101477613.414, "ph": "X", "dur": 246531.97193559946, "name": "run_multi_threaded_io (/home/roach/gil-analyze/main.py:53)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724151.208, "ph": "X", "dur": 1.268726482776771, "name": "set.discard", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724148.674, "ph": "X", "dur": 4.339077567884146, "name": "WeakSet.__init__.<locals>._remove (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:39)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724163.767, "ph": "X", "dur": 0.2854222126402879, "name": "set.discard", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724163.201, "ph": "X", "dur": 1.1114417952717184, "name": "WeakSet.__init__.<locals>._remove (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:39)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724168.405, "ph": "X", "dur": 0.3398669121612677, "name": "set.discard", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724167.919, "ph": "X", "dur": 1.0536974169918913, "name": "WeakSet.__init__.<locals>._remove (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:39)", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724173.677, "ph": "X", "dur": 0.356365305955504, "name": "set.discard", "cat": "FEE"}, {"pid": 346074, "tid": 346074, "ts": 46101724172.712, "ph": "X", "dur": 1.6052937161791916, "name": "WeakSet.__init__.<locals>._remove (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:39)", "cat": "FEE"}], "viztracer_metadata": {"version": "1.0.4", "overflow": false, "baseTimeNanoseconds": 1747621304885715496}, "file_info": {"files": {"/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py": ["\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"\n\nimport os as _os\nimport sys as _sys\nimport _thread\nimport warnings\n\nfrom time import monotonic as _time\nfrom _weakrefset import WeakSet\nfrom itertools import count as _count\ntry:\n    from _collections import deque as _deque\nexcept ImportError:\n    from collections import deque as _deque\n\n# Note regarding PEP 8 compliant names\n#  This threading model was originally inspired by Java, and inherited\n# the convention of camelCase function and method names from that\n# language. Those original names are not in any imminent danger of\n# being deprecated (even for Py3k),so this module provides them as an\n# alias for the PEP 8 compliant names\n# Note that using the new PEP 8 compliant names facilitates substitution\n# with the multiprocessing module, which doesn't provide the old\n# Java inspired names.\n\n__all__ = ['get_ident', 'active_count', 'Condition', 'current_thread',\n           'enumerate', 'main_thread', 'TIMEOUT_MAX',\n           'Event', 'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Thread',\n           'Barrier', 'BrokenBarrierError', 'Timer', 'ThreadError',\n           'setprofile', 'settrace', 'local', 'stack_size',\n           'excepthook', 'ExceptHookArgs', 'gettrace', 'getprofile',\n           'setprofile_all_threads','settrace_all_threads']\n\n# Rename some stuff so \"from threading import *\" is safe\n_start_joinable_thread = _thread.start_joinable_thread\n_daemon_threads_allowed = _thread.daemon_threads_allowed\n_allocate_lock = _thread.allocate_lock\n_LockType = _thread.LockType\n_thread_shutdown = _thread._shutdown\n_make_thread_handle = _thread._make_thread_handle\n_ThreadHandle = _thread._ThreadHandle\nget_ident = _thread.get_ident\n_get_main_thread_ident = _thread._get_main_thread_ident\n_is_main_interpreter = _thread._is_main_interpreter\ntry:\n    get_native_id = _thread.get_native_id\n    _HAVE_THREAD_NATIVE_ID = True\n    __all__.append('get_native_id')\nexcept AttributeError:\n    _HAVE_THREAD_NATIVE_ID = False\nThreadError = _thread.error\ntry:\n    _CRLock = _thread.RLock\nexcept AttributeError:\n    _CRLock = None\nTIMEOUT_MAX = _thread.TIMEOUT_MAX\ndel _thread\n\n# get thread-local implementation, either from the thread\n# module, or from the python fallback\n\ntry:\n    from _thread import _local as local\nexcept ImportError:\n    from _threading_local import local\n\n# Support for profile and trace hooks\n\n_profile_hook = None\n_trace_hook = None\n\ndef setprofile(func):\n    \"\"\"Set a profile function for all threads started from the threading module.\n\n    The func will be passed to sys.setprofile() for each thread, before its\n    run() method is called.\n    \"\"\"\n    global _profile_hook\n    _profile_hook = func\n\ndef setprofile_all_threads(func):\n    \"\"\"Set a profile function for all threads started from the threading module\n    and all Python threads that are currently executing.\n\n    The func will be passed to sys.setprofile() for each thread, before its\n    run() method is called.\n    \"\"\"\n    setprofile(func)\n    _sys._setprofileallthreads(func)\n\ndef getprofile():\n    \"\"\"Get the profiler function as set by threading.setprofile().\"\"\"\n    return _profile_hook\n\ndef settrace(func):\n    \"\"\"Set a trace function for all threads started from the threading module.\n\n    The func will be passed to sys.settrace() for each thread, before its run()\n    method is called.\n    \"\"\"\n    global _trace_hook\n    _trace_hook = func\n\ndef settrace_all_threads(func):\n    \"\"\"Set a trace function for all threads started from the threading module\n    and all Python threads that are currently executing.\n\n    The func will be passed to sys.settrace() for each thread, before its run()\n    method is called.\n    \"\"\"\n    settrace(func)\n    _sys._settraceallthreads(func)\n\ndef gettrace():\n    \"\"\"Get the trace function as set by threading.settrace().\"\"\"\n    return _trace_hook\n\n# Synchronization classes\n\nLock = _LockType\n\ndef RLock(*args, **kwargs):\n    \"\"\"Factory function that returns a new reentrant lock.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it again\n    without blocking; the thread must release it once for each time it has\n    acquired it.\n\n    \"\"\"\n    if args or kwargs:\n        warnings.warn(\n            'Passing arguments to RLock is deprecated and will be removed in 3.15',\n            DeprecationWarning,\n            stacklevel=2,\n        )\n    if _CRLock is None:\n        return _PyRLock(*args, **kwargs)\n    return _CRLock(*args, **kwargs)\n\nclass _RLock:\n    \"\"\"This class implements reentrant lock objects.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it\n    again without blocking; the thread must release it once for each time it\n    has acquired it.\n\n    \"\"\"\n\n    def __init__(self):\n        self._block = _allocate_lock()\n        self._owner = None\n        self._count = 0\n\n    def __repr__(self):\n        owner = self._owner\n        try:\n            owner = _active[owner].name\n        except KeyError:\n            pass\n        return \"<%s %s.%s object owner=%r count=%d at %s>\" % (\n            \"locked\" if self._block.locked() else \"unlocked\",\n            self.__class__.__module__,\n            self.__class__.__qualname__,\n            owner,\n            self._count,\n            hex(id(self))\n        )\n\n    def _at_fork_reinit(self):\n        self._block._at_fork_reinit()\n        self._owner = None\n        self._count = 0\n\n    def acquire(self, blocking=True, timeout=-1):\n        \"\"\"Acquire a lock, blocking or non-blocking.\n\n        When invoked without arguments: if this thread already owns the lock,\n        increment the recursion level by one, and return immediately. Otherwise,\n        if another thread owns the lock, block until the lock is unlocked. Once\n        the lock is unlocked (not owned by any thread), then grab ownership, set\n        the recursion level to one, and return. If more than one thread is\n        blocked waiting until the lock is unlocked, only one at a time will be\n        able to grab ownership of the lock. There is no return value in this\n        case.\n\n        When invoked with the blocking argument set to true, do the same thing\n        as when called without arguments, and return true.\n\n        When invoked with the blocking argument set to false, do not block. If a\n        call without an argument would block, return false immediately;\n        otherwise, do the same thing as when called without arguments, and\n        return true.\n\n        When invoked with the floating-point timeout argument set to a positive\n        value, block for at most the number of seconds specified by timeout\n        and as long as the lock cannot be acquired.  Return true if the lock has\n        been acquired, false if the timeout has elapsed.\n\n        \"\"\"\n        me = get_ident()\n        if self._owner == me:\n            self._count += 1\n            return 1\n        rc = self._block.acquire(blocking, timeout)\n        if rc:\n            self._owner = me\n            self._count = 1\n        return rc\n\n    __enter__ = acquire\n\n    def release(self):\n        \"\"\"Release a lock, decrementing the recursion level.\n\n        If after the decrement it is zero, reset the lock to unlocked (not owned\n        by any thread), and if any other threads are blocked waiting for the\n        lock to become unlocked, allow exactly one of them to proceed. If after\n        the decrement the recursion level is still nonzero, the lock remains\n        locked and owned by the calling thread.\n\n        Only call this method when the calling thread owns the lock. A\n        RuntimeError is raised if this method is called when the lock is\n        unlocked.\n\n        There is no return value.\n\n        \"\"\"\n        if self._owner != get_ident():\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        self._count = count = self._count - 1\n        if not count:\n            self._owner = None\n            self._block.release()\n\n    def __exit__(self, t, v, tb):\n        self.release()\n\n    # Internal methods used by condition variables\n\n    def _acquire_restore(self, state):\n        self._block.acquire()\n        self._count, self._owner = state\n\n    def _release_save(self):\n        if self._count == 0:\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        count = self._count\n        self._count = 0\n        owner = self._owner\n        self._owner = None\n        self._block.release()\n        return (count, owner)\n\n    def _is_owned(self):\n        return self._owner == get_ident()\n\n    # Internal method used for reentrancy checks\n\n    def _recursion_count(self):\n        if self._owner != get_ident():\n            return 0\n        return self._count\n\n_PyRLock = _RLock\n\n\nclass Condition:\n    \"\"\"Class that implements a condition variable.\n\n    A condition variable allows one or more threads to wait until they are\n    notified by another thread.\n\n    If the lock argument is given and not None, it must be a Lock or RLock\n    object, and it is used as the underlying lock. Otherwise, a new RLock object\n    is created and used as the underlying lock.\n\n    \"\"\"\n\n    def __init__(self, lock=None):\n        if lock is None:\n            lock = RLock()\n        self._lock = lock\n        # Export the lock's acquire() and release() methods\n        self.acquire = lock.acquire\n        self.release = lock.release\n        # If the lock defines _release_save() and/or _acquire_restore(),\n        # these override the default implementations (which just call\n        # release() and acquire() on the lock).  Ditto for _is_owned().\n        if hasattr(lock, '_release_save'):\n            self._release_save = lock._release_save\n        if hasattr(lock, '_acquire_restore'):\n            self._acquire_restore = lock._acquire_restore\n        if hasattr(lock, '_is_owned'):\n            self._is_owned = lock._is_owned\n        self._waiters = _deque()\n\n    def _at_fork_reinit(self):\n        self._lock._at_fork_reinit()\n        self._waiters.clear()\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n    def __repr__(self):\n        return \"<Condition(%s, %d)>\" % (self._lock, len(self._waiters))\n\n    def _release_save(self):\n        self._lock.release()           # No state to save\n\n    def _acquire_restore(self, x):\n        self._lock.acquire()           # Ignore saved state\n\n    def _is_owned(self):\n        # Return True if lock is owned by current_thread.\n        # This method is called only if _lock doesn't have _is_owned().\n        if self._lock.acquire(False):\n            self._lock.release()\n            return False\n        else:\n            return True\n\n    def wait(self, timeout=None):\n        \"\"\"Wait until notified or until a timeout occurs.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method releases the underlying lock, and then blocks until it is\n        awakened by a notify() or notify_all() call for the same condition\n        variable in another thread, or until the optional timeout occurs. Once\n        awakened or timed out, it re-acquires the lock and returns.\n\n        When the timeout argument is present and not None, it should be a\n        floating-point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        When the underlying lock is an RLock, it is not released using its\n        release() method, since this may not actually unlock the lock when it\n        was acquired multiple times recursively. Instead, an internal interface\n        of the RLock class is used, which really unlocks it even when it has\n        been recursively acquired several times. Another internal interface is\n        then used to restore the recursion level when the lock is reacquired.\n\n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot wait on un-acquired lock\")\n        waiter = _allocate_lock()\n        waiter.acquire()\n        self._waiters.append(waiter)\n        saved_state = self._release_save()\n        gotit = False\n        try:    # restore state no matter what (e.g., KeyboardInterrupt)\n            if timeout is None:\n                waiter.acquire()\n                gotit = True\n            else:\n                if timeout > 0:\n                    gotit = waiter.acquire(True, timeout)\n                else:\n                    gotit = waiter.acquire(False)\n            return gotit\n        finally:\n            self._acquire_restore(saved_state)\n            if not gotit:\n                try:\n                    self._waiters.remove(waiter)\n                except ValueError:\n                    pass\n\n    def wait_for(self, predicate, timeout=None):\n        \"\"\"Wait until a condition evaluates to True.\n\n        predicate should be a callable which result will be interpreted as a\n        boolean value.  A timeout may be provided giving the maximum time to\n        wait.\n\n        \"\"\"\n        endtime = None\n        waittime = timeout\n        result = predicate()\n        while not result:\n            if waittime is not None:\n                if endtime is None:\n                    endtime = _time() + waittime\n                else:\n                    waittime = endtime - _time()\n                    if waittime <= 0:\n                        break\n            self.wait(waittime)\n            result = predicate()\n        return result\n\n    def notify(self, n=1):\n        \"\"\"Wake up one or more threads waiting on this condition, if any.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method wakes up at most n of the threads waiting for the condition\n        variable; it is a no-op if no threads are waiting.\n\n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot notify on un-acquired lock\")\n        waiters = self._waiters\n        while waiters and n > 0:\n            waiter = waiters[0]\n            try:\n                waiter.release()\n            except RuntimeError:\n                # gh-92530: The previous call of notify() released the lock,\n                # but was interrupted before removing it from the queue.\n                # It can happen if a signal handler raises an exception,\n                # like CTRL+C which raises KeyboardInterrupt.\n                pass\n            else:\n                n -= 1\n            try:\n                waiters.remove(waiter)\n            except ValueError:\n                pass\n\n    def notify_all(self):\n        \"\"\"Wake up all threads waiting on this condition.\n\n        If the calling thread has not acquired the lock when this method\n        is called, a RuntimeError is raised.\n\n        \"\"\"\n        self.notify(len(self._waiters))\n\n    def notifyAll(self):\n        \"\"\"Wake up all threads waiting on this condition.\n\n        This method is deprecated, use notify_all() instead.\n\n        \"\"\"\n        import warnings\n        warnings.warn('notifyAll() is deprecated, use notify_all() instead',\n                      DeprecationWarning, stacklevel=2)\n        self.notify_all()\n\n\nclass Semaphore:\n    \"\"\"This class implements semaphore objects.\n\n    Semaphores manage a counter representing the number of release() calls minus\n    the number of acquire() calls, plus an initial value. The acquire() method\n    blocks if necessary until it can return without making the counter\n    negative. If not given, value defaults to 1.\n\n    \"\"\"\n\n    # After Tim Peters' semaphore class, but not quite the same (no maximum)\n\n    def __init__(self, value=1):\n        if value < 0:\n            raise ValueError(\"semaphore initial value must be >= 0\")\n        self._cond = Condition(Lock())\n        self._value = value\n\n    def __repr__(self):\n        cls = self.__class__\n        return (f\"<{cls.__module__}.{cls.__qualname__} at {id(self):#x}:\"\n                f\" value={self._value}>\")\n\n    def acquire(self, blocking=True, timeout=None):\n        \"\"\"Acquire a semaphore, decrementing the internal counter by one.\n\n        When invoked without arguments: if the internal counter is larger than\n        zero on entry, decrement it by one and return immediately. If it is zero\n        on entry, block, waiting until some other thread has called release() to\n        make it larger than zero. This is done with proper interlocking so that\n        if multiple acquire() calls are blocked, release() will wake exactly one\n        of them up. The implementation may pick one at random, so the order in\n        which blocked threads are awakened should not be relied on. There is no\n        return value in this case.\n\n        When invoked with blocking set to true, do the same thing as when called\n        without arguments, and return true.\n\n        When invoked with blocking set to false, do not block. If a call without\n        an argument would block, return false immediately; otherwise, do the\n        same thing as when called without arguments, and return true.\n\n        When invoked with a timeout other than None, it will block for at\n        most timeout seconds.  If acquire does not complete successfully in\n        that interval, return false.  Return true otherwise.\n\n        \"\"\"\n        if not blocking and timeout is not None:\n            raise ValueError(\"can't specify timeout for non-blocking acquire\")\n        rc = False\n        endtime = None\n        with self._cond:\n            while self._value == 0:\n                if not blocking:\n                    break\n                if timeout is not None:\n                    if endtime is None:\n                        endtime = _time() + timeout\n                    else:\n                        timeout = endtime - _time()\n                        if timeout <= 0:\n                            break\n                self._cond.wait(timeout)\n            else:\n                self._value -= 1\n                rc = True\n        return rc\n\n    __enter__ = acquire\n\n    def release(self, n=1):\n        \"\"\"Release a semaphore, incrementing the internal counter by one or more.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        \"\"\"\n        if n < 1:\n            raise ValueError('n must be one or more')\n        with self._cond:\n            self._value += n\n            self._cond.notify(n)\n\n    def __exit__(self, t, v, tb):\n        self.release()\n\n\nclass BoundedSemaphore(Semaphore):\n    \"\"\"Implements a bounded semaphore.\n\n    A bounded semaphore checks to make sure its current value doesn't exceed its\n    initial value. If it does, ValueError is raised. In most situations\n    semaphores are used to guard resources with limited capacity.\n\n    If the semaphore is released too many times it's a sign of a bug. If not\n    given, value defaults to 1.\n\n    Like regular semaphores, bounded semaphores manage a counter representing\n    the number of release() calls minus the number of acquire() calls, plus an\n    initial value. The acquire() method blocks if necessary until it can return\n    without making the counter negative. If not given, value defaults to 1.\n\n    \"\"\"\n\n    def __init__(self, value=1):\n        super().__init__(value)\n        self._initial_value = value\n\n    def __repr__(self):\n        cls = self.__class__\n        return (f\"<{cls.__module__}.{cls.__qualname__} at {id(self):#x}:\"\n                f\" value={self._value}/{self._initial_value}>\")\n\n    def release(self, n=1):\n        \"\"\"Release a semaphore, incrementing the internal counter by one or more.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        If the number of releases exceeds the number of acquires,\n        raise a ValueError.\n\n        \"\"\"\n        if n < 1:\n            raise ValueError('n must be one or more')\n        with self._cond:\n            if self._value + n > self._initial_value:\n                raise ValueError(\"Semaphore released too many times\")\n            self._value += n\n            self._cond.notify(n)\n\n\nclass Event:\n    \"\"\"Class implementing event objects.\n\n    Events manage a flag that can be set to true with the set() method and reset\n    to false with the clear() method. The wait() method blocks until the flag is\n    true.  The flag is initially false.\n\n    \"\"\"\n\n    # After Tim Peters' event class (without is_posted())\n\n    def __init__(self):\n        self._cond = Condition(Lock())\n        self._flag = False\n\n    def __repr__(self):\n        cls = self.__class__\n        status = 'set' if self._flag else 'unset'\n        return f\"<{cls.__module__}.{cls.__qualname__} at {id(self):#x}: {status}>\"\n\n    def _at_fork_reinit(self):\n        # Private method called by Thread._after_fork()\n        self._cond._at_fork_reinit()\n\n    def is_set(self):\n        \"\"\"Return true if and only if the internal flag is true.\"\"\"\n        return self._flag\n\n    def isSet(self):\n        \"\"\"Return true if and only if the internal flag is true.\n\n        This method is deprecated, use is_set() instead.\n\n        \"\"\"\n        import warnings\n        warnings.warn('isSet() is deprecated, use is_set() instead',\n                      DeprecationWarning, stacklevel=2)\n        return self.is_set()\n\n    def set(self):\n        \"\"\"Set the internal flag to true.\n\n        All threads waiting for it to become true are awakened. Threads\n        that call wait() once the flag is true will not block at all.\n\n        \"\"\"\n        with self._cond:\n            self._flag = True\n            self._cond.notify_all()\n\n    def clear(self):\n        \"\"\"Reset the internal flag to false.\n\n        Subsequently, threads calling wait() will block until set() is called to\n        set the internal flag to true again.\n\n        \"\"\"\n        with self._cond:\n            self._flag = False\n\n    def wait(self, timeout=None):\n        \"\"\"Block until the internal flag is true.\n\n        If the internal flag is true on entry, return immediately. Otherwise,\n        block until another thread calls set() to set the flag to true, or until\n        the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating-point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        This method returns the internal flag on exit, so it will always return\n        True except if a timeout is given and the operation times out.\n\n        \"\"\"\n        with self._cond:\n            signaled = self._flag\n            if not signaled:\n                signaled = self._cond.wait(timeout)\n            return signaled\n\n\n# A barrier class.  Inspired in part by the pthread_barrier_* api and\n# the CyclicBarrier class from Java.  See\n# http://sourceware.org/pthreads-win32/manual/pthread_barrier_init.html and\n# http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/\n#        CyclicBarrier.html\n# for information.\n# We maintain two main states, 'filling' and 'draining' enabling the barrier\n# to be cyclic.  Threads are not allowed into it until it has fully drained\n# since the previous cycle.  In addition, a 'resetting' state exists which is\n# similar to 'draining' except that threads leave with a BrokenBarrierError,\n# and a 'broken' state in which all threads get the exception.\nclass Barrier:\n    \"\"\"Implements a Barrier.\n\n    Useful for synchronizing a fixed number of threads at known synchronization\n    points.  Threads block on 'wait()' and are simultaneously awoken once they\n    have all made that call.\n\n    \"\"\"\n\n    def __init__(self, parties, action=None, timeout=None):\n        \"\"\"Create a barrier, initialised to 'parties' threads.\n\n        'action' is a callable which, when supplied, will be called by one of\n        the threads after they have all entered the barrier and just prior to\n        releasing them all. If a 'timeout' is provided, it is used as the\n        default for all subsequent 'wait()' calls.\n\n        \"\"\"\n        if parties < 1:\n            raise ValueError(\"parties must be >= 1\")\n        self._cond = Condition(Lock())\n        self._action = action\n        self._timeout = timeout\n        self._parties = parties\n        self._state = 0  # 0 filling, 1 draining, -1 resetting, -2 broken\n        self._count = 0\n\n    def __repr__(self):\n        cls = self.__class__\n        if self.broken:\n            return f\"<{cls.__module__}.{cls.__qualname__} at {id(self):#x}: broken>\"\n        return (f\"<{cls.__module__}.{cls.__qualname__} at {id(self):#x}:\"\n                f\" waiters={self.n_waiting}/{self.parties}>\")\n\n    def wait(self, timeout=None):\n        \"\"\"Wait for the barrier.\n\n        When the specified number of threads have started waiting, they are all\n        simultaneously awoken. If an 'action' was provided for the barrier, one\n        of the threads will have executed that callback prior to returning.\n        Returns an individual index number from 0 to 'parties-1'.\n\n        \"\"\"\n        if timeout is None:\n            timeout = self._timeout\n        with self._cond:\n            self._enter() # Block while the barrier drains.\n            index = self._count\n            self._count += 1\n            try:\n                if index + 1 == self._parties:\n                    # We release the barrier\n                    self._release()\n                else:\n                    # We wait until someone releases us\n                    self._wait(timeout)\n                return index\n            finally:\n                self._count -= 1\n                # Wake up any threads waiting for barrier to drain.\n                self._exit()\n\n    # Block until the barrier is ready for us, or raise an exception\n    # if it is broken.\n    def _enter(self):\n        while self._state in (-1, 1):\n            # It is draining or resetting, wait until done\n            self._cond.wait()\n        #see if the barrier is in a broken state\n        if self._state < 0:\n            raise BrokenBarrierError\n        assert self._state == 0\n\n    # Optionally run the 'action' and release the threads waiting\n    # in the barrier.\n    def _release(self):\n        try:\n            if self._action:\n                self._action()\n            # enter draining state\n            self._state = 1\n            self._cond.notify_all()\n        except:\n            #an exception during the _action handler.  Break and reraise\n            self._break()\n            raise\n\n    # Wait in the barrier until we are released.  Raise an exception\n    # if the barrier is reset or broken.\n    def _wait(self, timeout):\n        if not self._cond.wait_for(lambda : self._state != 0, timeout):\n            #timed out.  Break the barrier\n            self._break()\n            raise BrokenBarrierError\n        if self._state < 0:\n            raise BrokenBarrierError\n        assert self._state == 1\n\n    # If we are the last thread to exit the barrier, signal any threads\n    # waiting for the barrier to drain.\n    def _exit(self):\n        if self._count == 0:\n            if self._state in (-1, 1):\n                #resetting or draining\n                self._state = 0\n                self._cond.notify_all()\n\n    def reset(self):\n        \"\"\"Reset the barrier to the initial state.\n\n        Any threads currently waiting will get the BrokenBarrier exception\n        raised.\n\n        \"\"\"\n        with self._cond:\n            if self._count > 0:\n                if self._state == 0:\n                    #reset the barrier, waking up threads\n                    self._state = -1\n                elif self._state == -2:\n                    #was broken, set it to reset state\n                    #which clears when the last thread exits\n                    self._state = -1\n            else:\n                self._state = 0\n            self._cond.notify_all()\n\n    def abort(self):\n        \"\"\"Place the barrier into a 'broken' state.\n\n        Useful in case of error.  Any currently waiting threads and threads\n        attempting to 'wait()' will have BrokenBarrierError raised.\n\n        \"\"\"\n        with self._cond:\n            self._break()\n\n    def _break(self):\n        # An internal error was detected.  The barrier is set to\n        # a broken state all parties awakened.\n        self._state = -2\n        self._cond.notify_all()\n\n    @property\n    def parties(self):\n        \"\"\"Return the number of threads required to trip the barrier.\"\"\"\n        return self._parties\n\n    @property\n    def n_waiting(self):\n        \"\"\"Return the number of threads currently waiting at the barrier.\"\"\"\n        # We don't need synchronization here since this is an ephemeral result\n        # anyway.  It returns the correct value in the steady state.\n        if self._state == 0:\n            return self._count\n        return 0\n\n    @property\n    def broken(self):\n        \"\"\"Return True if the barrier is in a broken state.\"\"\"\n        return self._state == -2\n\n# exception raised by the Barrier class\nclass BrokenBarrierError(RuntimeError):\n    pass\n\n\n# Helper to generate new thread names\n_counter = _count(1).__next__\ndef _newname(name_template):\n    return name_template % _counter()\n\n# Active thread administration.\n#\n# bpo-44422: Use a reentrant lock to allow reentrant calls to functions like\n# threading.enumerate().\n_active_limbo_lock = RLock()\n_active = {}    # maps thread id to Thread object\n_limbo = {}\n_dangling = WeakSet()\n\n\n# Main class for threads\n\nclass Thread:\n    \"\"\"A class that represents a thread of control.\n\n    This class can be safely subclassed in a limited fashion. There are two ways\n    to specify the activity: by passing a callable object to the constructor, or\n    by overriding the run() method in a subclass.\n\n    \"\"\"\n\n    _initialized = False\n\n    def __init__(self, group=None, target=None, name=None,\n                 args=(), kwargs=None, *, daemon=None):\n        \"\"\"This constructor should always be called with keyword arguments. Arguments are:\n\n        *group* should be None; reserved for future extension when a ThreadGroup\n        class is implemented.\n\n        *target* is the callable object to be invoked by the run()\n        method. Defaults to None, meaning nothing is called.\n\n        *name* is the thread name. By default, a unique name is constructed of\n        the form \"Thread-N\" where N is a small decimal number.\n\n        *args* is a list or tuple of arguments for the target invocation. Defaults to ().\n\n        *kwargs* is a dictionary of keyword arguments for the target\n        invocation. Defaults to {}.\n\n        If a subclass overrides the constructor, it must make sure to invoke\n        the base class constructor (Thread.__init__()) before doing anything\n        else to the thread.\n\n        \"\"\"\n        assert group is None, \"group argument must be None for now\"\n        if kwargs is None:\n            kwargs = {}\n        if name:\n            name = str(name)\n        else:\n            name = _newname(\"Thread-%d\")\n            if target is not None:\n                try:\n                    target_name = target.__name__\n                    name += f\" ({target_name})\"\n                except AttributeError:\n                    pass\n\n        self._target = target\n        self._name = name\n        self._args = args\n        self._kwargs = kwargs\n        if daemon is not None:\n            if daemon and not _daemon_threads_allowed():\n                raise RuntimeError('daemon threads are disabled in this (sub)interpreter')\n            self._daemonic = daemon\n        else:\n            self._daemonic = current_thread().daemon\n        self._ident = None\n        if _HAVE_THREAD_NATIVE_ID:\n            self._native_id = None\n        self._handle = _ThreadHandle()\n        self._started = Event()\n        self._initialized = True\n        # Copy of sys.stderr used by self._invoke_excepthook()\n        self._stderr = _sys.stderr\n        self._invoke_excepthook = _make_invoke_excepthook()\n        # For debugging and _after_fork()\n        _dangling.add(self)\n\n    def _after_fork(self, new_ident=None):\n        # Private!  Called by threading._after_fork().\n        self._started._at_fork_reinit()\n        if new_ident is not None:\n            # This thread is alive.\n            self._ident = new_ident\n            assert self._handle.ident == new_ident\n        else:\n            # Otherwise, the thread is dead, Jim.  _PyThread_AfterFork()\n            # already marked our handle done.\n            pass\n\n    def __repr__(self):\n        assert self._initialized, \"Thread.__init__() was not called\"\n        status = \"initial\"\n        if self._started.is_set():\n            status = \"started\"\n        if self._handle.is_done():\n            status = \"stopped\"\n        if self._daemonic:\n            status += \" daemon\"\n        if self._ident is not None:\n            status += \" %s\" % self._ident\n        return \"<%s(%s, %s)>\" % (self.__class__.__name__, self._name, status)\n\n    def start(self):\n        \"\"\"Start the thread's activity.\n\n        It must be called at most once per thread object. It arranges for the\n        object's run() method to be invoked in a separate thread of control.\n\n        This method will raise a RuntimeError if called more than once on the\n        same thread object.\n\n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"thread.__init__() not called\")\n\n        if self._started.is_set():\n            raise RuntimeError(\"threads can only be started once\")\n\n        with _active_limbo_lock:\n            _limbo[self] = self\n        try:\n            # Start joinable thread\n            _start_joinable_thread(self._bootstrap, handle=self._handle,\n                                   daemon=self.daemon)\n        except Exception:\n            with _active_limbo_lock:\n                del _limbo[self]\n            raise\n        self._started.wait()  # Will set ident and native_id\n\n    def run(self):\n        \"\"\"Method representing the thread's activity.\n\n        You may override this method in a subclass. The standard run() method\n        invokes the callable object passed to the object's constructor as the\n        target argument, if any, with sequential and keyword arguments taken\n        from the args and kwargs arguments, respectively.\n\n        \"\"\"\n        try:\n            if self._target is not None:\n                self._target(*self._args, **self._kwargs)\n        finally:\n            # Avoid a refcycle if the thread is running a function with\n            # an argument that has a member that points to the thread.\n            del self._target, self._args, self._kwargs\n\n    def _bootstrap(self):\n        # Wrapper around the real bootstrap code that ignores\n        # exceptions during interpreter cleanup.  Those typically\n        # happen when a daemon thread wakes up at an unfortunate\n        # moment, finds the world around it destroyed, and raises some\n        # random exception *** while trying to report the exception in\n        # _bootstrap_inner() below ***.  Those random exceptions\n        # don't help anybody, and they confuse users, so we suppress\n        # them.  We suppress them only when it appears that the world\n        # indeed has already been destroyed, so that exceptions in\n        # _bootstrap_inner() during normal business hours are properly\n        # reported.  Also, we only suppress them for daemonic threads;\n        # if a non-daemonic encounters this, something else is wrong.\n        try:\n            self._bootstrap_inner()\n        except:\n            if self._daemonic and _sys is None:\n                return\n            raise\n\n    def _set_ident(self):\n        self._ident = get_ident()\n\n    if _HAVE_THREAD_NATIVE_ID:\n        def _set_native_id(self):\n            self._native_id = get_native_id()\n\n    def _bootstrap_inner(self):\n        try:\n            self._set_ident()\n            if _HAVE_THREAD_NATIVE_ID:\n                self._set_native_id()\n            self._started.set()\n            with _active_limbo_lock:\n                _active[self._ident] = self\n                del _limbo[self]\n\n            if _trace_hook:\n                _sys.settrace(_trace_hook)\n            if _profile_hook:\n                _sys.setprofile(_profile_hook)\n\n            try:\n                self.run()\n            except:\n                self._invoke_excepthook(self)\n        finally:\n            self._delete()\n\n    def _delete(self):\n        \"Remove current thread from the dict of currently running threads.\"\n        with _active_limbo_lock:\n            del _active[get_ident()]\n            # There must not be any python code between the previous line\n            # and after the lock is released.  Otherwise a tracing function\n            # could try to acquire the lock again in the same thread, (in\n            # current_thread()), and would block.\n\n    def join(self, timeout=None):\n        \"\"\"Wait until the thread terminates.\n\n        This blocks the calling thread until the thread whose join() method is\n        called terminates -- either normally or through an unhandled exception\n        or until the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating-point number specifying a timeout for the operation in seconds\n        (or fractions thereof). As join() always returns None, you must call\n        is_alive() after join() to decide whether a timeout happened -- if the\n        thread is still alive, the join() call timed out.\n\n        When the timeout argument is not present or None, the operation will\n        block until the thread terminates.\n\n        A thread can be join()ed many times.\n\n        join() raises a RuntimeError if an attempt is made to join the current\n        thread as that would cause a deadlock. It is also an error to join() a\n        thread before it has been started and attempts to do so raises the same\n        exception.\n\n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if not self._started.is_set():\n            raise RuntimeError(\"cannot join thread before it is started\")\n        if self is current_thread():\n            raise RuntimeError(\"cannot join current thread\")\n\n        # the behavior of a negative timeout isn't documented, but\n        # historically .join(timeout=x) for x<0 has acted as if timeout=0\n        if timeout is not None:\n            timeout = max(timeout, 0)\n\n        self._handle.join(timeout)\n\n    @property\n    def name(self):\n        \"\"\"A string used for identification purposes only.\n\n        It has no semantics. Multiple threads may be given the same name. The\n        initial name is set by the constructor.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        assert self._initialized, \"Thread.__init__() not called\"\n        self._name = str(name)\n\n    @property\n    def ident(self):\n        \"\"\"Thread identifier of this thread or None if it has not been started.\n\n        This is a nonzero integer. See the get_ident() function. Thread\n        identifiers may be recycled when a thread exits and another thread is\n        created. The identifier is available even after the thread has exited.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._ident\n\n    if _HAVE_THREAD_NATIVE_ID:\n        @property\n        def native_id(self):\n            \"\"\"Native integral thread ID of this thread, or None if it has not been started.\n\n            This is a non-negative integer. See the get_native_id() function.\n            This represents the Thread ID as reported by the kernel.\n\n            \"\"\"\n            assert self._initialized, \"Thread.__init__() not called\"\n            return self._native_id\n\n    def is_alive(self):\n        \"\"\"Return whether the thread is alive.\n\n        This method returns True just before the run() method starts until just\n        after the run() method terminates. See also the module function\n        enumerate().\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._started.is_set() and not self._handle.is_done()\n\n    @property\n    def daemon(self):\n        \"\"\"A boolean value indicating whether this thread is a daemon thread.\n\n        This must be set before start() is called, otherwise RuntimeError is\n        raised. Its initial value is inherited from the creating thread; the\n        main thread is not a daemon thread and therefore all threads created in\n        the main thread default to daemon = False.\n\n        The entire Python program exits when only daemon threads are left.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._daemonic\n\n    @daemon.setter\n    def daemon(self, daemonic):\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if daemonic and not _daemon_threads_allowed():\n            raise RuntimeError('daemon threads are disabled in this interpreter')\n        if self._started.is_set():\n            raise RuntimeError(\"cannot set daemon status of active thread\")\n        self._daemonic = daemonic\n\n    def isDaemon(self):\n        \"\"\"Return whether this thread is a daemon.\n\n        This method is deprecated, use the daemon attribute instead.\n\n        \"\"\"\n        import warnings\n        warnings.warn('isDaemon() is deprecated, get the daemon attribute instead',\n                      DeprecationWarning, stacklevel=2)\n        return self.daemon\n\n    def setDaemon(self, daemonic):\n        \"\"\"Set whether this thread is a daemon.\n\n        This method is deprecated, use the .daemon property instead.\n\n        \"\"\"\n        import warnings\n        warnings.warn('setDaemon() is deprecated, set the daemon attribute instead',\n                      DeprecationWarning, stacklevel=2)\n        self.daemon = daemonic\n\n    def getName(self):\n        \"\"\"Return a string used for identification purposes only.\n\n        This method is deprecated, use the name attribute instead.\n\n        \"\"\"\n        import warnings\n        warnings.warn('getName() is deprecated, get the name attribute instead',\n                      DeprecationWarning, stacklevel=2)\n        return self.name\n\n    def setName(self, name):\n        \"\"\"Set the name string for this thread.\n\n        This method is deprecated, use the name attribute instead.\n\n        \"\"\"\n        import warnings\n        warnings.warn('setName() is deprecated, set the name attribute instead',\n                      DeprecationWarning, stacklevel=2)\n        self.name = name\n\n\ntry:\n    from _thread import (_excepthook as excepthook,\n                         _ExceptHookArgs as ExceptHookArgs)\nexcept ImportError:\n    # Simple Python implementation if _thread._excepthook() is not available\n    from traceback import print_exception as _print_exception\n    from collections import namedtuple\n\n    _ExceptHookArgs = namedtuple(\n        'ExceptHookArgs',\n        'exc_type exc_value exc_traceback thread')\n\n    def ExceptHookArgs(args):\n        return _ExceptHookArgs(*args)\n\n    def excepthook(args, /):\n        \"\"\"\n        Handle uncaught Thread.run() exception.\n        \"\"\"\n        if args.exc_type == SystemExit:\n            # silently ignore SystemExit\n            return\n\n        if _sys is not None and _sys.stderr is not None:\n            stderr = _sys.stderr\n        elif args.thread is not None:\n            stderr = args.thread._stderr\n            if stderr is None:\n                # do nothing if sys.stderr is None and sys.stderr was None\n                # when the thread was created\n                return\n        else:\n            # do nothing if sys.stderr is None and args.thread is None\n            return\n\n        if args.thread is not None:\n            name = args.thread.name\n        else:\n            name = get_ident()\n        print(f\"Exception in thread {name}:\",\n              file=stderr, flush=True)\n        _print_exception(args.exc_type, args.exc_value, args.exc_traceback,\n                         file=stderr)\n        stderr.flush()\n\n\n# Original value of threading.excepthook\n__excepthook__ = excepthook\n\n\ndef _make_invoke_excepthook():\n    # Create a local namespace to ensure that variables remain alive\n    # when _invoke_excepthook() is called, even if it is called late during\n    # Python shutdown. It is mostly needed for daemon threads.\n\n    old_excepthook = excepthook\n    old_sys_excepthook = _sys.excepthook\n    if old_excepthook is None:\n        raise RuntimeError(\"threading.excepthook is None\")\n    if old_sys_excepthook is None:\n        raise RuntimeError(\"sys.excepthook is None\")\n\n    sys_exc_info = _sys.exc_info\n    local_print = print\n    local_sys = _sys\n\n    def invoke_excepthook(thread):\n        global excepthook\n        try:\n            hook = excepthook\n            if hook is None:\n                hook = old_excepthook\n\n            args = ExceptHookArgs([*sys_exc_info(), thread])\n\n            hook(args)\n        except Exception as exc:\n            exc.__suppress_context__ = True\n            del exc\n\n            if local_sys is not None and local_sys.stderr is not None:\n                stderr = local_sys.stderr\n            else:\n                stderr = thread._stderr\n\n            local_print(\"Exception in threading.excepthook:\",\n                        file=stderr, flush=True)\n\n            if local_sys is not None and local_sys.excepthook is not None:\n                sys_excepthook = local_sys.excepthook\n            else:\n                sys_excepthook = old_sys_excepthook\n\n            sys_excepthook(*sys_exc_info())\n        finally:\n            # Break reference cycle (exception stored in a variable)\n            args = None\n\n    return invoke_excepthook\n\n\n# The timer class was contributed by Itamar Shtull-Trauring\n\nclass Timer(Thread):\n    \"\"\"Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=None, kwargs=None)\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    \"\"\"\n\n    def __init__(self, interval, function, args=None, kwargs=None):\n        Thread.__init__(self)\n        self.interval = interval\n        self.function = function\n        self.args = args if args is not None else []\n        self.kwargs = kwargs if kwargs is not None else {}\n        self.finished = Event()\n\n    def cancel(self):\n        \"\"\"Stop the timer if it hasn't finished yet.\"\"\"\n        self.finished.set()\n\n    def run(self):\n        self.finished.wait(self.interval)\n        if not self.finished.is_set():\n            self.function(*self.args, **self.kwargs)\n        self.finished.set()\n\n\n# Special thread class to represent the main thread\n\nclass _MainThread(Thread):\n\n    def __init__(self):\n        Thread.__init__(self, name=\"MainThread\", daemon=False)\n        self._started.set()\n        self._ident = _get_main_thread_ident()\n        self._handle = _make_thread_handle(self._ident)\n        if _HAVE_THREAD_NATIVE_ID:\n            self._set_native_id()\n        with _active_limbo_lock:\n            _active[self._ident] = self\n\n\n# Helper thread-local instance to detect when a _DummyThread\n# is collected. Not a part of the public API.\n_thread_local_info = local()\n\n\nclass _DeleteDummyThreadOnDel:\n    '''\n    Helper class to remove a dummy thread from threading._active on __del__.\n    '''\n\n    def __init__(self, dummy_thread):\n        self._dummy_thread = dummy_thread\n        self._tident = dummy_thread.ident\n        # Put the thread on a thread local variable so that when\n        # the related thread finishes this instance is collected.\n        #\n        # Note: no other references to this instance may be created.\n        # If any client code creates a reference to this instance,\n        # the related _DummyThread will be kept forever!\n        _thread_local_info._track_dummy_thread_ref = self\n\n    def __del__(self):\n        with _active_limbo_lock:\n            if _active.get(self._tident) is self._dummy_thread:\n                _active.pop(self._tident, None)\n\n\n# Dummy thread class to represent threads not started here.\n# These should be added to `_active` and removed automatically\n# when they die, although they can't be waited for.\n# Their purpose is to return *something* from current_thread().\n# They are marked as daemon threads so we won't wait for them\n# when we exit (conform previous semantics).\n\nclass _DummyThread(Thread):\n\n    def __init__(self):\n        Thread.__init__(self, name=_newname(\"Dummy-%d\"),\n                        daemon=_daemon_threads_allowed())\n        self._started.set()\n        self._set_ident()\n        self._handle = _make_thread_handle(self._ident)\n        if _HAVE_THREAD_NATIVE_ID:\n            self._set_native_id()\n        with _active_limbo_lock:\n            _active[self._ident] = self\n        _DeleteDummyThreadOnDel(self)\n\n    def is_alive(self):\n        if not self._handle.is_done() and self._started.is_set():\n            return True\n        raise RuntimeError(\"thread is not alive\")\n\n    def join(self, timeout=None):\n        raise RuntimeError(\"cannot join a dummy thread\")\n\n    def _after_fork(self, new_ident=None):\n        if new_ident is not None:\n            self.__class__ = _MainThread\n            self._name = 'MainThread'\n            self._daemonic = False\n        Thread._after_fork(self, new_ident=new_ident)\n\n\n# Global API functions\n\ndef current_thread():\n    \"\"\"Return the current Thread object, corresponding to the caller's thread of control.\n\n    If the caller's thread of control was not created through the threading\n    module, a dummy thread object with limited functionality is returned.\n\n    \"\"\"\n    try:\n        return _active[get_ident()]\n    except KeyError:\n        return _DummyThread()\n\ndef currentThread():\n    \"\"\"Return the current Thread object, corresponding to the caller's thread of control.\n\n    This function is deprecated, use current_thread() instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('currentThread() is deprecated, use current_thread() instead',\n                  DeprecationWarning, stacklevel=2)\n    return current_thread()\n\ndef active_count():\n    \"\"\"Return the number of Thread objects currently alive.\n\n    The returned count is equal to the length of the list returned by\n    enumerate().\n\n    \"\"\"\n    # NOTE: if the logic in here ever changes, update Modules/posixmodule.c\n    # warn_about_fork_with_threads() to match.\n    with _active_limbo_lock:\n        return len(_active) + len(_limbo)\n\ndef activeCount():\n    \"\"\"Return the number of Thread objects currently alive.\n\n    This function is deprecated, use active_count() instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('activeCount() is deprecated, use active_count() instead',\n                  DeprecationWarning, stacklevel=2)\n    return active_count()\n\ndef _enumerate():\n    # Same as enumerate(), but without the lock. Internal use only.\n    return list(_active.values()) + list(_limbo.values())\n\ndef enumerate():\n    \"\"\"Return a list of all Thread objects currently alive.\n\n    The list includes daemonic threads, dummy thread objects created by\n    current_thread(), and the main thread. It excludes terminated threads and\n    threads that have not yet been started.\n\n    \"\"\"\n    with _active_limbo_lock:\n        return list(_active.values()) + list(_limbo.values())\n\n\n_threading_atexits = []\n_SHUTTING_DOWN = False\n\ndef _register_atexit(func, *arg, **kwargs):\n    \"\"\"CPython internal: register *func* to be called before joining threads.\n\n    The registered *func* is called with its arguments just before all\n    non-daemon threads are joined in `_shutdown()`. It provides a similar\n    purpose to `atexit.register()`, but its functions are called prior to\n    threading shutdown instead of interpreter shutdown.\n\n    For similarity to atexit, the registered functions are called in reverse.\n    \"\"\"\n    if _SHUTTING_DOWN:\n        raise RuntimeError(\"can't register atexit after shutdown\")\n\n    _threading_atexits.append(lambda: func(*arg, **kwargs))\n\n\nfrom _thread import stack_size\n\n# Create the main thread object,\n# and make it available for the interpreter\n# (Py_Main) as threading._shutdown.\n\n_main_thread = _MainThread()\n\ndef _shutdown():\n    \"\"\"\n    Wait until the Python thread state of all non-daemon threads get deleted.\n    \"\"\"\n    # Obscure: other threads may be waiting to join _main_thread.  That's\n    # dubious, but some code does it. We can't wait for it to be marked as done\n    # normally - that won't happen until the interpreter is nearly dead. So\n    # mark it done here.\n    if _main_thread._handle.is_done() and _is_main_interpreter():\n        # _shutdown() was already called\n        return\n\n    global _SHUTTING_DOWN\n    _SHUTTING_DOWN = True\n\n    # Call registered threading atexit functions before threads are joined.\n    # Order is reversed, similar to atexit.\n    for atexit_call in reversed(_threading_atexits):\n        atexit_call()\n\n    if _is_main_interpreter():\n        _main_thread._handle._set_done()\n\n    # Wait for all non-daemon threads to exit.\n    _thread_shutdown()\n\n\ndef main_thread():\n    \"\"\"Return the main thread object.\n\n    In normal conditions, the main thread is the thread from which the\n    Python interpreter was started.\n    \"\"\"\n    # XXX Figure this out for subinterpreters.  (See gh-75698.)\n    return _main_thread\n\n\ndef _after_fork():\n    \"\"\"\n    Cleanup threading module state that should not exist after a fork.\n    \"\"\"\n    # Reset _active_limbo_lock, in case we forked while the lock was held\n    # by another (non-forked) thread.  http://bugs.python.org/issue874900\n    global _active_limbo_lock, _main_thread\n    _active_limbo_lock = RLock()\n\n    # fork() only copied the current thread; clear references to others.\n    new_active = {}\n\n    try:\n        current = _active[get_ident()]\n    except KeyError:\n        # fork() was called in a thread which was not spawned\n        # by threading.Thread. For example, a thread spawned\n        # by thread.start_new_thread().\n        current = _MainThread()\n\n    _main_thread = current\n\n    with _active_limbo_lock:\n        # Dangling thread instances must still have their locks reset,\n        # because someone may join() them.\n        threads = set(_enumerate())\n        threads.update(_dangling)\n        for thread in threads:\n            # Any lock/condition variable may be currently locked or in an\n            # invalid state, so we reinitialize them.\n            if thread is current:\n                # This is the one and only active thread.\n                ident = get_ident()\n                thread._after_fork(new_ident=ident)\n                new_active[ident] = thread\n            else:\n                # All the others are already stopped.\n                thread._after_fork()\n\n        _limbo.clear()\n        _active.clear()\n        _active.update(new_active)\n        assert len(_active) == 1\n\n\nif hasattr(_os, \"register_at_fork\"):\n    _os.register_at_fork(after_in_child=_after_fork)\n", 1599], "/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py": ["# Access WeakSet through the weakref module.\n# This code is separated-out because it is needed\n# by abc.py to load everything else at startup.\n\nfrom _weakref import ref\nfrom types import GenericAlias\n\n__all__ = ['WeakSet']\n\n\nclass _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n\n    def __enter__(self):\n        w = self.weakcontainer()\n        if w is not None:\n            w._iterating.add(self)\n        return self\n\n    def __exit__(self, e, t, b):\n        w = self.weakcontainer()\n        if w is not None:\n            s = w._iterating\n            s.remove(self)\n            if not s:\n                w._commit_removals()\n\n\nclass WeakSet:\n    def __init__(self, data=None):\n        self.data = set()\n        def _remove(item, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(item)\n                else:\n                    self.data.discard(item)\n        self._remove = _remove\n        # A list of keys to be removed\n        self._pending_removals = []\n        self._iterating = set()\n        if data is not None:\n            self.update(data)\n\n    def _commit_removals(self):\n        pop = self._pending_removals.pop\n        discard = self.data.discard\n        while True:\n            try:\n                item = pop()\n            except IndexError:\n                return\n            discard(item)\n\n    def __iter__(self):\n        with _IterationGuard(self):\n            for itemref in self.data:\n                item = itemref()\n                if item is not None:\n                    # Caveat: the iterator will keep a strong reference to\n                    # `item` until it is resumed or closed.\n                    yield item\n\n    def __len__(self):\n        return len(self.data) - len(self._pending_removals)\n\n    def __contains__(self, item):\n        try:\n            wr = ref(item)\n        except TypeError:\n            return False\n        return wr in self.data\n\n    def __reduce__(self):\n        return self.__class__, (list(self),), self.__getstate__()\n\n    def add(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.add(ref(item, self._remove))\n\n    def clear(self):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.clear()\n\n    def copy(self):\n        return self.__class__(self)\n\n    def pop(self):\n        if self._pending_removals:\n            self._commit_removals()\n        while True:\n            try:\n                itemref = self.data.pop()\n            except KeyError:\n                raise KeyError('pop from empty WeakSet') from None\n            item = itemref()\n            if item is not None:\n                return item\n\n    def remove(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.remove(ref(item))\n\n    def discard(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.discard(ref(item))\n\n    def update(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        for element in other:\n            self.add(element)\n\n    def __ior__(self, other):\n        self.update(other)\n        return self\n\n    def difference(self, other):\n        newset = self.copy()\n        newset.difference_update(other)\n        return newset\n    __sub__ = difference\n\n    def difference_update(self, other):\n        self.__isub__(other)\n    def __isub__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.difference_update(ref(item) for item in other)\n        return self\n\n    def intersection(self, other):\n        return self.__class__(item for item in other if item in self)\n    __and__ = intersection\n\n    def intersection_update(self, other):\n        self.__iand__(other)\n    def __iand__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.intersection_update(ref(item) for item in other)\n        return self\n\n    def issubset(self, other):\n        return self.data.issubset(ref(item) for item in other)\n    __le__ = issubset\n\n    def __lt__(self, other):\n        return self.data < set(map(ref, other))\n\n    def issuperset(self, other):\n        return self.data.issuperset(ref(item) for item in other)\n    __ge__ = issuperset\n\n    def __gt__(self, other):\n        return self.data > set(map(ref, other))\n\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.data == set(map(ref, other))\n\n    def symmetric_difference(self, other):\n        newset = self.copy()\n        newset.symmetric_difference_update(other)\n        return newset\n    __xor__ = symmetric_difference\n\n    def symmetric_difference_update(self, other):\n        self.__ixor__(other)\n    def __ixor__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.symmetric_difference_update(ref(item, self._remove) for item in other)\n        return self\n\n    def union(self, other):\n        return self.__class__(e for s in (self, other) for e in s)\n    __or__ = union\n\n    def isdisjoint(self, other):\n        return len(self.intersection(other)) == 0\n\n    def __repr__(self):\n        return repr(self.data)\n\n    __class_getitem__ = classmethod(GenericAlias)\n", 205], "/home/roach/gil-analyze/main.py": ["import random\nimport time\nimport threading\nfrom threading import Thread\nfrom viztracer import VizTracer # VizTracer import\nimport os\n\n# CPU-bound \uc791\uc5c5\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud558\ub294 \ud568\uc218\n# def work_cpu(label=\"\", iterations=2):\n#     \"\"\"CPU\ub97c \ub9ce\uc774 \uc0ac\uc6a9\ud558\ub294 \uc791\uc5c5\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud569\ub2c8\ub2e4.\"\"\"\n#     # \ub9e4\uc6b0 \uae34 \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud558\uace0 \ucd5c\uc18c\uac12\uc744 \ucc3e\ub294 \uc791\uc5c5\n#     min_val = min([random.random() * 100 for _ in range(iterations)])\ndef work_cpu(label=\"\", iterations=2):\n    \"\"\"CPU\ub97c \ub9ce\uc774 \uc0ac\uc6a9\ud558\ub294 \uc791\uc5c5\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud569\ub2c8\ub2e4.\"\"\"\n    # yield \uac04\uaca9\uc744 \uc124\uc815 (\uc791\uc740 \uac12\uc73c\ub85c \uc124\uc815\ud558\uba74 \ub354 \uc790\uc8fc \uc804\ud658)\n    yield_interval = iterations // 100  # \uc804\uccb4 \uc791\uc5c5\uc744 100\ubc88\uc73c\ub85c \ub098\ub214\n    \n    for i in range(0, iterations, yield_interval):\n        # yield_interval \ud06c\uae30\ub9cc\ud07c\uc758 \uc791\uc5c5 \uc218\ud589\n        chunk = [random.random() * 100 for _ in range(min(yield_interval, iterations - i))]\n        min_val = min(chunk)\n        # \uc8fc\uae30\uc801\uc73c\ub85c yield\ud558\uc5ec \ub2e4\ub978 \uc2a4\ub808\ub4dc\uc5d0 \uc2e4\ud589 \uae30\ud68c \uc81c\uacf5\n        if i + yield_interval < iterations:\n            time.sleep(0)  # yield \ud6a8\uacfc\ub97c \ub0b4\uae30 \uc704\ud55c \uc9e7\uc740 sleep\n\n# I/O-bound \uc791\uc5c5\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud558\ub294 \ud568\uc218\ndef work_io(label=\"\", sleep_duration=0.5):\n    \"\"\"I/O \ub300\uae30 \uc791\uc5c5\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud569\ub2c8\ub2e4. time.sleep()\uc740 GIL\uc744 \ud574\uc81c\ud569\ub2c8\ub2e4.\"\"\"\n    time.sleep(sleep_duration)\n\n# --- \uc2e4\ud589 \ud568\uc218\ub4e4 ---\n\ndef run_single_thread_sequential_cpu(num_tasks=2, iterations_per_task=20_000_000):\n    \"\"\"\ub2e8\uc77c \uc2a4\ub808\ub4dc\uc5d0\uc11c CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4.\"\"\"\n    for i in range(num_tasks):\n        work_cpu(label=f\"SingleCPU-{i+1}\", iterations=iterations_per_task)\n\ndef run_multi_threaded_cpu(num_threads=2, iterations_per_task=20_000_000):\n    \"\"\"\ub2e4\uc911 \uc2a4\ub808\ub4dc\uc5d0\uc11c CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\"\"\"\n    threads = []\n    for i in range(num_threads):\n        thread = Thread(target=work_cpu, args=(f\"MultiCPU-Thread-{i+1}\", iterations_per_task))\n        threads.append(thread)\n        thread.start()\n    for thread in threads:\n        thread.join()\n\ndef run_single_thread_sequential_io(num_tasks=4, sleep_per_task=0.5):\n    \"\"\"\ub2e8\uc77c \uc2a4\ub808\ub4dc\uc5d0\uc11c I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4.\"\"\"\n    for i in range(num_tasks):\n        work_io(label=f\"SingleIO-{i+1}\", sleep_duration=sleep_per_task)\n\ndef run_multi_threaded_io(num_threads=4, sleep_per_task=0.5):\n    \"\"\"\ub2e4\uc911 \uc2a4\ub808\ub4dc\uc5d0\uc11c I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\"\"\"\n    threads = []\n    for i in range(num_threads):\n        thread = Thread(target=work_io, args=(f\"MultiIO-Thread-{i+1}\", sleep_per_task))\n        threads.append(thread)\n        thread.start()\n    for thread in threads:\n        thread.join()\n\nif __name__ == \"__main__\":\n    # \ubd84\uc11d\uc744 \uc704\ud55c \ud30c\ub77c\ubbf8\ud130 (\ud544\uc694\uc2dc \uc870\uc815)\n    # CPU \uc791\uc5c5 \ubc18\ubcf5 \ud69f\uc218\ub97c \uc904\uc5ec\uc11c \ud2b8\ub808\uc774\uc2a4 \ud30c\uc77c \ud06c\uae30 \ubc0f \uc2dc\uac04 \ub2e8\ucd95 \uac00\ub2a5\n    # GIL \ud6a8\uacfc\ub97c \ubcf4\ub824\uba74 \uc5ec\uc804\ud788 \ucda9\ubd84\ud788 \ucee4\uc57c \ud568\n    CPU_ITERATIONS = 500_00 # \uae30\uc874 20_000_000\uc5d0\uc11c \uc904\uc5ec\uc11c \ud14c\uc2a4\ud2b8 \uc2dc\uac04 \ub2e8\ucd95\n    NUM_CPU_TASKS_OR_THREADS = 2\n\n    IO_SLEEP_DURATION = 0.25 # IO \uc791\uc5c5 \uc2dc\uac04 \uc904\uc5ec\uc11c \ud14c\uc2a4\ud2b8 \uc2dc\uac04 \ub2e8\ucd95\n    NUM_IO_TASKS_OR_THREADS = 4\n\n    # --- 1. CPU-Bound, Single-Thread Sequential ---\n    trace_file_single_cpu = \"trace_single_thread_cpu.json\"\n    print(f\"--- Tracing: Single-Thread Sequential (CPU-Bound) to {trace_file_single_cpu} ---\")\n    start_time = time.time()\n    with VizTracer(output_file=trace_file_single_cpu, file_info=True, log_gc=True) as _: # tracer \ubcc0\uc218 \uc0ac\uc6a9 \uc548 \ud560 \uc2dc _\n        run_single_thread_sequential_cpu(num_tasks=NUM_CPU_TASKS_OR_THREADS, iterations_per_task=CPU_ITERATIONS)\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.3f}s\")\n    print(f\"Trace saved. To view: python -m viztracer {trace_file_single_cpu}\\n\")\n\n    # --- 2. CPU-Bound, Multi-Thread ---\n    # \uc774 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c GIL\uc758 \uc601\ud5a5\uc744 \uac00\uc7a5 \uc798 \uad00\ucc30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    trace_file_multi_cpu = \"trace_multi_thread_cpu.json\"\n    print(f\"--- Tracing: Multi-Thread (CPU-Bound) to {trace_file_multi_cpu} ---\")\n    start_time = time.time()\n    # log_async=True\ub294 \uc2a4\ub808\ub4dc \ud65c\ub3d9\uc744 \ub354 \uc798 \ucd94\uc801\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    # max_stack_depth\ub97c \uc801\uc808\ud788 \uc124\uc815\ud558\uc5ec \ub108\ubb34 \uae4a\uc740 \ud638\ucd9c \uc2a4\ud0dd\uc73c\ub85c \uc778\ud55c \uc131\ub2a5 \uc800\ud558 \ubc29\uc9c0 (\uae30\ubcf8\uac12\uc740 \ubcf4\ud1b5 \uad1c\ucc2e\uc74c)\n    with VizTracer(output_file=trace_file_multi_cpu, file_info=True, log_gc=True, log_async=True) as _:\n        run_multi_threaded_cpu(num_threads=NUM_CPU_TASKS_OR_THREADS, iterations_per_task=CPU_ITERATIONS)\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.3f}s\")\n    print(f\"Trace saved. To view: python -m viztracer {trace_file_multi_cpu}\\n\")\n\n    # --- 3. I/O-Bound, Single-Thread Sequential ---\n    trace_file_single_io = \"trace_single_thread_io.json\"\n    print(f\"--- Tracing: Single-Thread Sequential (I/O-Bound) to {trace_file_single_io} ---\")\n    start_time = time.time()\n    with VizTracer(output_file=trace_file_single_io, file_info=True, log_gc=True) as _:\n        run_single_thread_sequential_io(num_tasks=NUM_IO_TASKS_OR_THREADS, sleep_per_task=IO_SLEEP_DURATION)\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.3f}s\")\n    print(f\"Trace saved. To view: python -m viztracer {trace_file_single_io}\\n\")\n\n    # --- 4. I/O-Bound, Multi-Thread ---\n    # \uc774 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c \uc2a4\ub808\ub4dc\uac00 I/O \ub300\uae30 \uc911 GIL\uc744 \ud574\uc81c\ud558\uc5ec \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \uac83\uc744 \uad00\ucc30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    trace_file_multi_io = \"trace_multi_thread_io.json\"\n    print(f\"--- Tracing: Multi-Thread (I/O-Bound) to {trace_file_multi_io} ---\")\n    start_time = time.time()\n    with VizTracer(output_file=trace_file_multi_io, file_info=True, log_gc=True, log_async=True) as _:\n        run_multi_threaded_io(num_threads=NUM_IO_TASKS_OR_THREADS, sleep_per_task=IO_SLEEP_DURATION)\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.3f}s\")\n    print(f\"Trace saved. To view: python -m viztracer {trace_file_multi_io}\\n\")\n\n    print(\"All tracing complete.\")\n    print(\"Open the generated .json files with 'python -m viztracer <filename.json>' to analyze.\")", 117]}, "functions": {"_newname (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:843)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 843], "current_thread (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1427)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 1427], "Thread.daemon (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1145)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 1145], "Condition.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:281)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 281], "Event.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:592)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 592], "_make_invoke_excepthook (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1265)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 1265], "WeakSet.add (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:85)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py", 85], "Thread.__init__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:869)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 869], "Event.is_set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:605)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 605], "Condition.__enter__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:303)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 303], "Condition._is_owned (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:318)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 318], "Condition._release_save (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:312)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 312], "Thread._set_ident (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1018)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 1018], "Thread._set_native_id (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1022)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 1022], "Condition.notify (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:398)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 398], "Condition.notify_all (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:428)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 428], "Condition.__exit__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:306)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 306], "Event.set (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:620)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 620], "Condition._acquire_restore (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:315)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 315], "Condition.wait (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:327)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 327], "Event.wait (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:641)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 641], "Thread.start (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:953)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 953], "work_io (/home/roach/gil-analyze/main.py:27)": ["/home/roach/gil-analyze/main.py", 27], "Thread.run (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:981)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 981], "Thread._delete (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1047)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 1047], "Thread._bootstrap_inner (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1025)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 1025], "Thread._bootstrap (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:998)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 998], "_DeleteDummyThreadOnDel.__del__ (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1382)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 1382], "WeakSet.__init__.<locals>._remove (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py:39)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/_weakrefset.py", 39], "Thread.join (/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py:1056)": ["/home/roach/.local/share/uv/python/cpython-3.13.2-linux-x86_64-gnu/lib/python3.13/threading.py", 1056], "run_multi_threaded_io (/home/roach/gil-analyze/main.py:53)": ["/home/roach/gil-analyze/main.py", 53]}}}