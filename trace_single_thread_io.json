{"traceEvents": [{"ph": "M", "pid": 20604, "tid": 20604, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 20604, "tid": 20604, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 20604, "tid": 20604, "ts": 2637197163.47, "ph": "X", "dur": 250213.3930101418, "name": "time.sleep", "cat": "FEE"}, {"pid": 20604, "tid": 20604, "ts": 2637197162.605, "ph": "X", "dur": 250216.5325596504, "name": "work_io (/home/roach/gil-analyze/main.py:17)", "cat": "FEE"}, {"pid": 20604, "tid": 20604, "ts": 2637447399.649, "ph": "X", "dur": 250434.87138342508, "name": "time.sleep", "cat": "FEE"}, {"pid": 20604, "tid": 20604, "ts": 2637447396.603, "ph": "X", "dur": 250441.6183548231, "name": "work_io (/home/roach/gil-analyze/main.py:17)", "cat": "FEE"}, {"pid": 20604, "tid": 20604, "ts": 2637697862.688, "ph": "X", "dur": 257569.8679930619, "name": "time.sleep", "cat": "FEE"}, {"pid": 20604, "tid": 20604, "ts": 2637697861.238, "ph": "X", "dur": 257576.45366860248, "name": "work_io (/home/roach/gil-analyze/main.py:17)", "cat": "FEE"}, {"pid": 20604, "tid": 20604, "ts": 2637955466.887, "ph": "X", "dur": 257763.9761180557, "name": "time.sleep", "cat": "FEE"}, {"pid": 20604, "tid": 20604, "ts": 2637955464.419, "ph": "X", "dur": 257771.45464052339, "name": "work_io (/home/roach/gil-analyze/main.py:17)", "cat": "FEE"}, {"pid": 20604, "tid": 20604, "ts": 2637197159.17, "ph": "X", "dur": 1016082.4940130026, "name": "run_single_thread_sequential_io (/home/roach/gil-analyze/main.py:40)", "cat": "FEE"}], "viztracer_metadata": {"version": "1.0.4", "overflow": false, "baseTimeNanoseconds": 1747449799080860805}, "file_info": {"files": {"/home/roach/gil-analyze/main.py": ["import random\nimport time\nimport threading\nfrom threading import Thread\nfrom viztracer import VizTracer # VizTracer import\nimport os\n\n# CPU-bound \uc791\uc5c5\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud558\ub294 \ud568\uc218\ndef work_cpu(label=\"\", iterations=2):\n    \"\"\"CPU\ub97c \ub9ce\uc774 \uc0ac\uc6a9\ud558\ub294 \uc791\uc5c5\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud569\ub2c8\ub2e4.\"\"\"\n    # print(f\"[{label} CPU Work] Process ID: {os.getpid()}, Thread ID: {threading.get_ident()} starting...\")\n    # \ub9e4\uc6b0 \uae34 \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud558\uace0 \ucd5c\uc18c\uac12\uc744 \ucc3e\ub294 \uc791\uc5c5\n    min_val = min([random.random() * 100 for _ in range(iterations)])\n    # print(f\"[{label} CPU Work] Process ID: {os.getpid()}, Thread ID: {threading.get_ident()} finished. Min val: {min_val:.2f}\")\n\n# I/O-bound \uc791\uc5c5\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud558\ub294 \ud568\uc218\ndef work_io(label=\"\", sleep_duration=0.5):\n    \"\"\"I/O \ub300\uae30 \uc791\uc5c5\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud569\ub2c8\ub2e4. time.sleep()\uc740 GIL\uc744 \ud574\uc81c\ud569\ub2c8\ub2e4.\"\"\"\n    # print(f\"[{label} I/O Work] Process ID: {os.getpid()}, Thread ID: {threading.get_ident()} starting...\")\n    time.sleep(sleep_duration)\n    # print(f\"[{label} I/O Work] Process ID: {os.getpid()}, Thread ID: {threading.get_ident()} finished.\")\n\n# --- \uc2e4\ud589 \ud568\uc218\ub4e4 ---\n\ndef run_single_thread_sequential_cpu(num_tasks=2, iterations_per_task=20_000_000):\n    \"\"\"\ub2e8\uc77c \uc2a4\ub808\ub4dc\uc5d0\uc11c CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4.\"\"\"\n    for i in range(num_tasks):\n        work_cpu(label=f\"SingleCPU-{i+1}\", iterations=iterations_per_task)\n\ndef run_multi_threaded_cpu(num_threads=2, iterations_per_task=20_000_000):\n    \"\"\"\ub2e4\uc911 \uc2a4\ub808\ub4dc\uc5d0\uc11c CPU \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\"\"\"\n    threads = []\n    for i in range(num_threads):\n        thread = Thread(target=work_cpu, args=(f\"MultiCPU-Thread-{i+1}\", iterations_per_task))\n        threads.append(thread)\n        thread.start()\n    for thread in threads:\n        thread.join()\n\ndef run_single_thread_sequential_io(num_tasks=4, sleep_per_task=0.5):\n    \"\"\"\ub2e8\uc77c \uc2a4\ub808\ub4dc\uc5d0\uc11c I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4.\"\"\"\n    for i in range(num_tasks):\n        work_io(label=f\"SingleIO-{i+1}\", sleep_duration=sleep_per_task)\n\ndef run_multi_threaded_io(num_threads=4, sleep_per_task=0.5):\n    \"\"\"\ub2e4\uc911 \uc2a4\ub808\ub4dc\uc5d0\uc11c I/O \ubc14\uc6b4\ub4dc \uc791\uc5c5\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.\"\"\"\n    threads = []\n    for i in range(num_threads):\n        thread = Thread(target=work_io, args=(f\"MultiIO-Thread-{i+1}\", sleep_per_task))\n        threads.append(thread)\n        thread.start()\n    for thread in threads:\n        thread.join()\n\nif __name__ == \"__main__\":\n    # \ubd84\uc11d\uc744 \uc704\ud55c \ud30c\ub77c\ubbf8\ud130 (\ud544\uc694\uc2dc \uc870\uc815)\n    # CPU \uc791\uc5c5 \ubc18\ubcf5 \ud69f\uc218\ub97c \uc904\uc5ec\uc11c \ud2b8\ub808\uc774\uc2a4 \ud30c\uc77c \ud06c\uae30 \ubc0f \uc2dc\uac04 \ub2e8\ucd95 \uac00\ub2a5\n    # GIL \ud6a8\uacfc\ub97c \ubcf4\ub824\uba74 \uc5ec\uc804\ud788 \ucda9\ubd84\ud788 \ucee4\uc57c \ud568\n    CPU_ITERATIONS = 500_00 # \uae30\uc874 20_000_000\uc5d0\uc11c \uc904\uc5ec\uc11c \ud14c\uc2a4\ud2b8 \uc2dc\uac04 \ub2e8\ucd95\n    NUM_CPU_TASKS_OR_THREADS = 2\n\n    IO_SLEEP_DURATION = 0.25 # IO \uc791\uc5c5 \uc2dc\uac04 \uc904\uc5ec\uc11c \ud14c\uc2a4\ud2b8 \uc2dc\uac04 \ub2e8\ucd95\n    NUM_IO_TASKS_OR_THREADS = 4\n\n    # --- 1. CPU-Bound, Single-Thread Sequential ---\n    trace_file_single_cpu = \"trace_single_thread_cpu.json\"\n    print(f\"--- Tracing: Single-Thread Sequential (CPU-Bound) to {trace_file_single_cpu} ---\")\n    start_time = time.time()\n    with VizTracer(output_file=trace_file_single_cpu, file_info=True, log_gc=True) as _: # tracer \ubcc0\uc218 \uc0ac\uc6a9 \uc548 \ud560 \uc2dc _\n        run_single_thread_sequential_cpu(num_tasks=NUM_CPU_TASKS_OR_THREADS, iterations_per_task=CPU_ITERATIONS)\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.3f}s\")\n    print(f\"Trace saved. To view: python -m viztracer {trace_file_single_cpu}\\n\")\n\n    # --- 2. CPU-Bound, Multi-Thread ---\n    # \uc774 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c GIL\uc758 \uc601\ud5a5\uc744 \uac00\uc7a5 \uc798 \uad00\ucc30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    trace_file_multi_cpu = \"trace_multi_thread_cpu.json\"\n    print(f\"--- Tracing: Multi-Thread (CPU-Bound) to {trace_file_multi_cpu} ---\")\n    start_time = time.time()\n    # log_async=True\ub294 \uc2a4\ub808\ub4dc \ud65c\ub3d9\uc744 \ub354 \uc798 \ucd94\uc801\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    # max_stack_depth\ub97c \uc801\uc808\ud788 \uc124\uc815\ud558\uc5ec \ub108\ubb34 \uae4a\uc740 \ud638\ucd9c \uc2a4\ud0dd\uc73c\ub85c \uc778\ud55c \uc131\ub2a5 \uc800\ud558 \ubc29\uc9c0 (\uae30\ubcf8\uac12\uc740 \ubcf4\ud1b5 \uad1c\ucc2e\uc74c)\n    with VizTracer(output_file=trace_file_multi_cpu, file_info=True, log_gc=True, log_async=True) as _:\n        run_multi_threaded_cpu(num_threads=NUM_CPU_TASKS_OR_THREADS, iterations_per_task=CPU_ITERATIONS)\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.3f}s\")\n    print(f\"Trace saved. To view: python -m viztracer {trace_file_multi_cpu}\\n\")\n\n    # --- 3. I/O-Bound, Single-Thread Sequential ---\n    trace_file_single_io = \"trace_single_thread_io.json\"\n    print(f\"--- Tracing: Single-Thread Sequential (I/O-Bound) to {trace_file_single_io} ---\")\n    start_time = time.time()\n    with VizTracer(output_file=trace_file_single_io, file_info=True, log_gc=True) as _:\n        run_single_thread_sequential_io(num_tasks=NUM_IO_TASKS_OR_THREADS, sleep_per_task=IO_SLEEP_DURATION)\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.3f}s\")\n    print(f\"Trace saved. To view: python -m viztracer {trace_file_single_io}\\n\")\n\n    # --- 4. I/O-Bound, Multi-Thread ---\n    # \uc774 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c \uc2a4\ub808\ub4dc\uac00 I/O \ub300\uae30 \uc911 GIL\uc744 \ud574\uc81c\ud558\uc5ec \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \uac83\uc744 \uad00\ucc30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    trace_file_multi_io = \"trace_multi_thread_io.json\"\n    print(f\"--- Tracing: Multi-Thread (I/O-Bound) to {trace_file_multi_io} ---\")\n    start_time = time.time()\n    with VizTracer(output_file=trace_file_multi_io, file_info=True, log_gc=True, log_async=True) as _:\n        run_multi_threaded_io(num_threads=NUM_IO_TASKS_OR_THREADS, sleep_per_task=IO_SLEEP_DURATION)\n    end_time = time.time()\n    print(f\"Execution time: {end_time - start_time:.3f}s\")\n    print(f\"Trace saved. To view: python -m viztracer {trace_file_multi_io}\\n\")\n\n    print(\"All tracing complete.\")\n    print(\"Open the generated .json files with 'python -m viztracer <filename.json>' to analyze.\")", 109]}, "functions": {"work_io (/home/roach/gil-analyze/main.py:17)": ["/home/roach/gil-analyze/main.py", 17], "run_single_thread_sequential_io (/home/roach/gil-analyze/main.py:40)": ["/home/roach/gil-analyze/main.py", 40]}}}